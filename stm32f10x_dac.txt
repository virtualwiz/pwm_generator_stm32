; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\stm32f10x_dac.o --asm_dir=.\ --list_dir=.\ --depend=.\obj\stm32f10x_dac.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\stm32f10x_dac.crf FWlib\SRC\stm32f10x_dac.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  DAC_DeInit PROC
;;;106      */
;;;107    void DAC_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;108    {
;;;109      /* Enable DAC reset state */
;;;110      RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
000002  2101              MOVS     r1,#1
000004  0748              LSLS     r0,r1,#29
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;111      /* Release DAC from reset state */
;;;112      RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f04f5000          MOV      r0,#0x20000000
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;113    }
000014  bd10              POP      {r4,pc}
;;;114    
                          ENDP

                  DAC_Init PROC
;;;126      */
;;;127    void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
000016  b530              PUSH     {r4,r5,lr}
;;;128    {
;;;129      uint32_t tmpreg1 = 0, tmpreg2 = 0;
000018  2200              MOVS     r2,#0
00001a  2300              MOVS     r3,#0
;;;130      /* Check the DAC parameters */
;;;131      assert_param(IS_DAC_TRIGGER(DAC_InitStruct->DAC_Trigger));
;;;132      assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
;;;133      assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
;;;134      assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
;;;135    /*---------------------------- DAC CR Configuration --------------------------*/
;;;136      /* Get the DAC CR value */
;;;137      tmpreg1 = DAC->CR;
00001c  4c4d              LDR      r4,|L1.340|
00001e  6822              LDR      r2,[r4,#0]
;;;138      /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
;;;139      tmpreg1 &= ~(CR_CLEAR_Mask << DAC_Channel);
000020  f64074fe          MOV      r4,#0xffe
000024  4084              LSLS     r4,r4,r0
000026  43a2              BICS     r2,r2,r4
;;;140      /* Configure for the selected DAC channel: buffer output, trigger, wave genration,
;;;141         mask/amplitude for wave genration */
;;;142      /* Set TSELx and TENx bits according to DAC_Trigger value */
;;;143      /* Set WAVEx bits according to DAC_WaveGeneration value */
;;;144      /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
;;;145      /* Set BOFFx bit according to DAC_OutputBuffer value */   
;;;146      tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
000028  e9d14500          LDRD     r4,r5,[r1,#0]
00002c  432c              ORRS     r4,r4,r5
00002e  688d              LDR      r5,[r1,#8]
000030  432c              ORRS     r4,r4,r5
000032  68cd              LDR      r5,[r1,#0xc]
000034  ea440305          ORR      r3,r4,r5
;;;147                 DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
;;;148      /* Calculate CR register value depending on DAC_Channel */
;;;149      tmpreg1 |= tmpreg2 << DAC_Channel;
000038  fa03f400          LSL      r4,r3,r0
00003c  4322              ORRS     r2,r2,r4
;;;150      /* Write to DAC CR */
;;;151      DAC->CR = tmpreg1;
00003e  4c45              LDR      r4,|L1.340|
000040  6022              STR      r2,[r4,#0]
;;;152    }
000042  bd30              POP      {r4,r5,pc}
;;;153    
                          ENDP

                  DAC_StructInit PROC
;;;159      */
;;;160    void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
000044  2100              MOVS     r1,#0
;;;161    {
;;;162    /*--------------- Reset DAC init structure parameters values -----------------*/
;;;163      /* Initialize the DAC_Trigger member */
;;;164      DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
000046  6001              STR      r1,[r0,#0]
;;;165      /* Initialize the DAC_WaveGeneration member */
;;;166      DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
000048  6041              STR      r1,[r0,#4]
;;;167      /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
;;;168      DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
00004a  6081              STR      r1,[r0,#8]
;;;169      /* Initialize the DAC_OutputBuffer member */
;;;170      DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
00004c  60c1              STR      r1,[r0,#0xc]
;;;171    }
00004e  4770              BX       lr
;;;172    
                          ENDP

                  DAC_Cmd PROC
;;;182      */
;;;183    void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
000050  b139              CBZ      r1,|L1.98|
;;;184    {
;;;185      /* Check the parameters */
;;;186      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;187      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;188      if (NewState != DISABLE)
;;;189      {
;;;190        /* Enable the selected DAC channel */
;;;191        DAC->CR |= CR_EN_Set << DAC_Channel;
000052  4a40              LDR      r2,|L1.340|
000054  6812              LDR      r2,[r2,#0]
000056  2301              MOVS     r3,#1
000058  4083              LSLS     r3,r3,r0
00005a  431a              ORRS     r2,r2,r3
00005c  4b3d              LDR      r3,|L1.340|
00005e  601a              STR      r2,[r3,#0]
000060  e006              B        |L1.112|
                  |L1.98|
;;;192      }
;;;193      else
;;;194      {
;;;195        /* Disable the selected DAC channel */
;;;196        DAC->CR &= ~(CR_EN_Set << DAC_Channel);
000062  4a3c              LDR      r2,|L1.340|
000064  6812              LDR      r2,[r2,#0]
000066  2301              MOVS     r3,#1
000068  4083              LSLS     r3,r3,r0
00006a  439a              BICS     r2,r2,r3
00006c  4b39              LDR      r3,|L1.340|
00006e  601a              STR      r2,[r3,#0]
                  |L1.112|
;;;197      }
;;;198    }
000070  4770              BX       lr
;;;199    
                          ENDP

                  DAC_DMACmd PROC
;;;209      */
;;;210    void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
000072  b141              CBZ      r1,|L1.134|
;;;211    {
;;;212      /* Check the parameters */
;;;213      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;214      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;215      if (NewState != DISABLE)
;;;216      {
;;;217        /* Enable the selected DAC channel DMA request */
;;;218        DAC->CR |= CR_DMAEN_Set << DAC_Channel;
000074  4a37              LDR      r2,|L1.340|
000076  6812              LDR      r2,[r2,#0]
000078  f44f5380          MOV      r3,#0x1000
00007c  4083              LSLS     r3,r3,r0
00007e  431a              ORRS     r2,r2,r3
000080  4b34              LDR      r3,|L1.340|
000082  601a              STR      r2,[r3,#0]
000084  e007              B        |L1.150|
                  |L1.134|
;;;219      }
;;;220      else
;;;221      {
;;;222        /* Disable the selected DAC channel DMA request */
;;;223        DAC->CR &= ~(CR_DMAEN_Set << DAC_Channel);
000086  4a33              LDR      r2,|L1.340|
000088  6812              LDR      r2,[r2,#0]
00008a  f44f5380          MOV      r3,#0x1000
00008e  4083              LSLS     r3,r3,r0
000090  439a              BICS     r2,r2,r3
000092  4b30              LDR      r3,|L1.340|
000094  601a              STR      r2,[r3,#0]
                  |L1.150|
;;;224      }
;;;225    }
000096  4770              BX       lr
;;;226    
                          ENDP

                  DAC_SoftwareTriggerCmd PROC
;;;236      */
;;;237    void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
000098  b510              PUSH     {r4,lr}
;;;238    {
;;;239      /* Check the parameters */
;;;240      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;241      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;242      if (NewState != DISABLE)
00009a  b151              CBZ      r1,|L1.178|
;;;243      {
;;;244        /* Enable software trigger for the selected DAC channel */
;;;245        DAC->SWTRIGR |= SWTRIGR_SWTRIG_Set << (DAC_Channel >> 4);
00009c  4a2d              LDR      r2,|L1.340|
00009e  1d12              ADDS     r2,r2,#4
0000a0  6812              LDR      r2,[r2,#0]
0000a2  0904              LSRS     r4,r0,#4
0000a4  2301              MOVS     r3,#1
0000a6  40a3              LSLS     r3,r3,r4
0000a8  431a              ORRS     r2,r2,r3
0000aa  4b2a              LDR      r3,|L1.340|
0000ac  1d1b              ADDS     r3,r3,#4
0000ae  601a              STR      r2,[r3,#0]
0000b0  e009              B        |L1.198|
                  |L1.178|
;;;246      }
;;;247      else
;;;248      {
;;;249        /* Disable software trigger for the selected DAC channel */
;;;250        DAC->SWTRIGR &= ~(SWTRIGR_SWTRIG_Set << (DAC_Channel >> 4));
0000b2  4a28              LDR      r2,|L1.340|
0000b4  1d12              ADDS     r2,r2,#4
0000b6  6812              LDR      r2,[r2,#0]
0000b8  0904              LSRS     r4,r0,#4
0000ba  2301              MOVS     r3,#1
0000bc  40a3              LSLS     r3,r3,r4
0000be  439a              BICS     r2,r2,r3
0000c0  4b24              LDR      r3,|L1.340|
0000c2  1d1b              ADDS     r3,r3,#4
0000c4  601a              STR      r2,[r3,#0]
                  |L1.198|
;;;251      }
;;;252    }
0000c6  bd10              POP      {r4,pc}
;;;253    
                          ENDP

                  DAC_DualSoftwareTriggerCmd PROC
;;;260      */
;;;261    void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
0000c8  b140              CBZ      r0,|L1.220|
;;;262    {
;;;263      /* Check the parameters */
;;;264      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;265      if (NewState != DISABLE)
;;;266      {
;;;267        /* Enable software trigger for both DAC channels */
;;;268        DAC->SWTRIGR |= DUAL_SWTRIG_Set ;
0000ca  4922              LDR      r1,|L1.340|
0000cc  1d09              ADDS     r1,r1,#4
0000ce  6809              LDR      r1,[r1,#0]
0000d0  f0410103          ORR      r1,r1,#3
0000d4  4a1f              LDR      r2,|L1.340|
0000d6  1d12              ADDS     r2,r2,#4
0000d8  6011              STR      r1,[r2,#0]
0000da  e007              B        |L1.236|
                  |L1.220|
;;;269      }
;;;270      else
;;;271      {
;;;272        /* Disable software trigger for both DAC channels */
;;;273        DAC->SWTRIGR &= DUAL_SWTRIG_Reset;
0000dc  491d              LDR      r1,|L1.340|
0000de  1d09              ADDS     r1,r1,#4
0000e0  6809              LDR      r1,[r1,#0]
0000e2  f0210103          BIC      r1,r1,#3
0000e6  4a1b              LDR      r2,|L1.340|
0000e8  1d12              ADDS     r2,r2,#4
0000ea  6011              STR      r1,[r2,#0]
                  |L1.236|
;;;274      }
;;;275    }
0000ec  4770              BX       lr
;;;276    
                          ENDP

                  DAC_WaveGenerationCmd PROC
;;;290      */
;;;291    void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
0000ee  b510              PUSH     {r4,lr}
;;;292    {
;;;293      /* Check the parameters */
;;;294      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;295      assert_param(IS_DAC_WAVE(DAC_Wave)); 
;;;296      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;297      if (NewState != DISABLE)
0000f0  b13a              CBZ      r2,|L1.258|
;;;298      {
;;;299        /* Enable the selected wave generation for the selected DAC channel */
;;;300        DAC->CR |= DAC_Wave << DAC_Channel;
0000f2  4b18              LDR      r3,|L1.340|
0000f4  681b              LDR      r3,[r3,#0]
0000f6  fa01f400          LSL      r4,r1,r0
0000fa  4323              ORRS     r3,r3,r4
0000fc  4c15              LDR      r4,|L1.340|
0000fe  6023              STR      r3,[r4,#0]
000100  e006              B        |L1.272|
                  |L1.258|
;;;301      }
;;;302      else
;;;303      {
;;;304        /* Disable the selected wave generation for the selected DAC channel */
;;;305        DAC->CR &= ~(DAC_Wave << DAC_Channel);
000102  4b14              LDR      r3,|L1.340|
000104  681b              LDR      r3,[r3,#0]
000106  fa01f400          LSL      r4,r1,r0
00010a  43a3              BICS     r3,r3,r4
00010c  4c11              LDR      r4,|L1.340|
00010e  6023              STR      r3,[r4,#0]
                  |L1.272|
;;;306      }
;;;307    }
000110  bd10              POP      {r4,pc}
;;;308    
                          ENDP

                  DAC_SetChannel1Data PROC
;;;319      */
;;;320    void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
000112  4a11              LDR      r2,|L1.344|
;;;321    {
;;;322      /* Check the parameters */
;;;323      assert_param(IS_DAC_ALIGN(DAC_Align));
;;;324      assert_param(IS_DAC_DATA(Data));
;;;325      /* Set the DAC channel1 selected data holding register */
;;;326      *((__IO uint32_t *)(DAC_BASE + DHR12R1_Offset + DAC_Align)) = (uint32_t)Data;
000114  4402              ADD      r2,r2,r0
000116  f8c21408          STR      r1,[r2,#0x408]
;;;327    }
00011a  4770              BX       lr
;;;328    
                          ENDP

                  DAC_SetChannel2Data PROC
;;;339      */
;;;340    void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
00011c  4a0e              LDR      r2,|L1.344|
;;;341    {
;;;342      /* Check the parameters */
;;;343      assert_param(IS_DAC_ALIGN(DAC_Align));
;;;344      assert_param(IS_DAC_DATA(Data));
;;;345      /* Set the DAC channel2 selected data holding register */
;;;346      *((__IO uint32_t *)(DAC_BASE + DHR12R2_Offset + DAC_Align)) = (uint32_t)Data;
00011e  4402              ADD      r2,r2,r0
000120  f8c21414          STR      r1,[r2,#0x414]
;;;347    }
000124  4770              BX       lr
;;;348    
                          ENDP

                  DAC_SetDualChannelData PROC
;;;362      */
;;;363    void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
000126  b510              PUSH     {r4,lr}
;;;364    {
;;;365      uint32_t data = 0;
000128  2300              MOVS     r3,#0
;;;366      /* Check the parameters */
;;;367      assert_param(IS_DAC_ALIGN(DAC_Align));
;;;368      assert_param(IS_DAC_DATA(Data1));
;;;369      assert_param(IS_DAC_DATA(Data2));
;;;370      
;;;371      /* Calculate and set dual DAC data holding register value */
;;;372      if (DAC_Align == DAC_Align_8b_R)
00012a  2808              CMP      r0,#8
00012c  d102              BNE      |L1.308|
;;;373      {
;;;374        data = ((uint32_t)Data2 << 8) | Data1; 
00012e  ea422301          ORR      r3,r2,r1,LSL #8
000132  e001              B        |L1.312|
                  |L1.308|
;;;375      }
;;;376      else
;;;377      {
;;;378        data = ((uint32_t)Data2 << 16) | Data1;
000134  ea424301          ORR      r3,r2,r1,LSL #16
                  |L1.312|
;;;379      }
;;;380      /* Set the dual DAC selected data holding register */
;;;381      *((__IO uint32_t *)(DAC_BASE + DHR12RD_Offset + DAC_Align)) = data;
000138  4c07              LDR      r4,|L1.344|
00013a  4404              ADD      r4,r4,r0
00013c  f8c43420          STR      r3,[r4,#0x420]
;;;382    }
000140  bd10              POP      {r4,pc}
;;;383    
                          ENDP

                  DAC_GetDataOutputValue PROC
;;;391      */
;;;392    uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
000142  4601              MOV      r1,r0
;;;393    {
;;;394      /* Check the parameters */
;;;395      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;396      /* Returns the DAC channel data output register value */
;;;397      return (uint16_t) (*(__IO uint32_t*)(DAC_BASE + DOR_Offset + ((uint32_t)DAC_Channel >> 2)));
000144  4a04              LDR      r2,|L1.344|
000146  eb020091          ADD      r0,r2,r1,LSR #2
00014a  f8d0042c          LDR      r0,[r0,#0x42c]
00014e  b280              UXTH     r0,r0
;;;398    }
000150  4770              BX       lr
;;;399    
                          ENDP

000152  0000              DCW      0x0000
                  |L1.340|
                          DCD      0x40007400
                  |L1.344|
                          DCD      0x40007000
