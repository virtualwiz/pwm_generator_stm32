; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\stm32f10x_pwr.o --asm_dir=.\ --list_dir=.\ --depend=.\obj\stm32f10x_pwr.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\stm32f10x_pwr.crf FWlib\SRC\stm32f10x_pwr.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  PWR_DeInit PROC
;;;119      */
;;;120    void PWR_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;121    {
;;;122      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
000002  2101              MOVS     r1,#1
000004  0708              LSLS     r0,r1,#28
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;123      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f04f5080          MOV      r0,#0x10000000
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;124    }
000014  bd10              POP      {r4,pc}
;;;125    
                          ENDP

                  PWR_BackupAccessCmd PROC
;;;131      */
;;;132    void PWR_BackupAccessCmd(FunctionalState NewState)
000016  4927              LDR      r1,|L1.180|
;;;133    {
;;;134      /* Check the parameters */
;;;135      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;136      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
000018  6208              STR      r0,[r1,#0x20]
;;;137    }
00001a  4770              BX       lr
;;;138    
                          ENDP

                  PWR_PVDCmd PROC
;;;144      */
;;;145    void PWR_PVDCmd(FunctionalState NewState)
00001c  4925              LDR      r1,|L1.180|
;;;146    {
;;;147      /* Check the parameters */
;;;148      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;149      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
00001e  6108              STR      r0,[r1,#0x10]
;;;150    }
000020  4770              BX       lr
;;;151    
                          ENDP

                  PWR_PVDLevelConfig PROC
;;;166      */
;;;167    void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
000022  4601              MOV      r1,r0
;;;168    {
;;;169      uint32_t tmpreg = 0;
000024  2000              MOVS     r0,#0
;;;170      /* Check the parameters */
;;;171      assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
;;;172      tmpreg = PWR->CR;
000026  4a24              LDR      r2,|L1.184|
000028  6810              LDR      r0,[r2,#0]
;;;173      /* Clear PLS[7:5] bits */
;;;174      tmpreg &= CR_PLS_Mask;
00002a  f02000e0          BIC      r0,r0,#0xe0
;;;175      /* Set PLS[7:5] bits according to PWR_PVDLevel value */
;;;176      tmpreg |= PWR_PVDLevel;
00002e  4308              ORRS     r0,r0,r1
;;;177      /* Store the new value */
;;;178      PWR->CR = tmpreg;
000030  6010              STR      r0,[r2,#0]
;;;179    }
000032  4770              BX       lr
;;;180    
                          ENDP

                  PWR_WakeUpPinCmd PROC
;;;186      */
;;;187    void PWR_WakeUpPinCmd(FunctionalState NewState)
000034  491f              LDR      r1,|L1.180|
;;;188    {
;;;189      /* Check the parameters */
;;;190      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;191      *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
000036  31a0              ADDS     r1,r1,#0xa0
000038  6008              STR      r0,[r1,#0]
;;;192    }
00003a  4770              BX       lr
;;;193    
                          ENDP

                  PWR_EnterSTOPMode PROC
;;;207      */
;;;208    void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
00003c  b510              PUSH     {r4,lr}
;;;209    {
00003e  4602              MOV      r2,r0
;;;210      uint32_t tmpreg = 0;
000040  2000              MOVS     r0,#0
;;;211      /* Check the parameters */
;;;212      assert_param(IS_PWR_REGULATOR(PWR_Regulator));
;;;213      assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
;;;214      
;;;215      /* Select the regulator state in STOP mode ---------------------------------*/
;;;216      tmpreg = PWR->CR;
000042  4b1d              LDR      r3,|L1.184|
000044  6818              LDR      r0,[r3,#0]
;;;217      /* Clear PDDS and LPDS bits */
;;;218      tmpreg &= CR_DS_Mask;
000046  f0200003          BIC      r0,r0,#3
;;;219      /* Set LPDS bit according to PWR_Regulator value */
;;;220      tmpreg |= PWR_Regulator;
00004a  4310              ORRS     r0,r0,r2
;;;221      /* Store the new value */
;;;222      PWR->CR = tmpreg;
00004c  6018              STR      r0,[r3,#0]
;;;223      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;224      *(__IO uint32_t *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
00004e  4b1b              LDR      r3,|L1.188|
000050  681b              LDR      r3,[r3,#0]
000052  f0430304          ORR      r3,r3,#4
000056  4c19              LDR      r4,|L1.188|
000058  6023              STR      r3,[r4,#0]
;;;225      
;;;226      /* Select STOP mode entry --------------------------------------------------*/
;;;227      if(PWR_STOPEntry == PWR_STOPEntry_WFI)
00005a  2901              CMP      r1,#1
00005c  d101              BNE      |L1.98|
;;;228      {   
;;;229        /* Request Wait For Interrupt */
;;;230        __WFI();
00005e  bf30              WFI      
000060  e000              B        |L1.100|
                  |L1.98|
;;;231      }
;;;232      else
;;;233      {
;;;234        /* Request Wait For Event */
;;;235        __WFE();
000062  bf20              WFE      
                  |L1.100|
;;;236      }
;;;237    }
000064  bd10              POP      {r4,pc}
;;;238    
                          ENDP

                  PWR_EnterSTANDBYMode PROC
;;;243      */
;;;244    void PWR_EnterSTANDBYMode(void)
000066  4814              LDR      r0,|L1.184|
;;;245    {
;;;246      /* Clear Wake-up flag */
;;;247      PWR->CR |= CR_CWUF_Set;
000068  6800              LDR      r0,[r0,#0]
00006a  f0400004          ORR      r0,r0,#4
00006e  4912              LDR      r1,|L1.184|
000070  6008              STR      r0,[r1,#0]
;;;248      /* Select STANDBY mode */
;;;249      PWR->CR |= CR_PDDS_Set;
000072  4608              MOV      r0,r1
000074  6800              LDR      r0,[r0,#0]
000076  f0400002          ORR      r0,r0,#2
00007a  6008              STR      r0,[r1,#0]
;;;250      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;251      *(__IO uint32_t *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
00007c  480f              LDR      r0,|L1.188|
00007e  6800              LDR      r0,[r0,#0]
000080  f0400004          ORR      r0,r0,#4
000084  490d              LDR      r1,|L1.188|
000086  6008              STR      r0,[r1,#0]
;;;252    /* This option is used to ensure that store operations are completed */
;;;253    #if defined ( __CC_ARM   )
;;;254      __force_stores();
000088  bf00              NOP      
00008a  bf00              NOP      
;;;255    #endif
;;;256      /* Request Wait For Interrupt */
;;;257      __WFI();
00008c  bf30              WFI      
;;;258    }
00008e  4770              BX       lr
;;;259    
                          ENDP

                  PWR_GetFlagStatus PROC
;;;268      */
;;;269    FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
000090  4601              MOV      r1,r0
;;;270    {
;;;271      FlagStatus bitstatus = RESET;
000092  2000              MOVS     r0,#0
;;;272      /* Check the parameters */
;;;273      assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
;;;274      
;;;275      if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
000094  4a08              LDR      r2,|L1.184|
000096  6852              LDR      r2,[r2,#4]
000098  400a              ANDS     r2,r2,r1
00009a  b10a              CBZ      r2,|L1.160|
;;;276      {
;;;277        bitstatus = SET;
00009c  2001              MOVS     r0,#1
00009e  e000              B        |L1.162|
                  |L1.160|
;;;278      }
;;;279      else
;;;280      {
;;;281        bitstatus = RESET;
0000a0  2000              MOVS     r0,#0
                  |L1.162|
;;;282      }
;;;283      /* Return the flag status */
;;;284      return bitstatus;
;;;285    }
0000a2  4770              BX       lr
;;;286    
                          ENDP

                  PWR_ClearFlag PROC
;;;294      */
;;;295    void PWR_ClearFlag(uint32_t PWR_FLAG)
0000a4  4904              LDR      r1,|L1.184|
;;;296    {
;;;297      /* Check the parameters */
;;;298      assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
;;;299             
;;;300      PWR->CR |=  PWR_FLAG << 2;
0000a6  6809              LDR      r1,[r1,#0]
0000a8  ea410180          ORR      r1,r1,r0,LSL #2
0000ac  4a02              LDR      r2,|L1.184|
0000ae  6011              STR      r1,[r2,#0]
;;;301    }
0000b0  4770              BX       lr
;;;302    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L1.180|
                          DCD      0x420e0000
                  |L1.184|
                          DCD      0x40007000
                  |L1.188|
                          DCD      0xe000ed10
