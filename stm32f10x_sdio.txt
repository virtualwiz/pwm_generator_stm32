; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\stm32f10x_sdio.o --asm_dir=.\ --list_dir=.\ --depend=.\obj\stm32f10x_sdio.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\stm32f10x_sdio.crf FWlib\SRC\stm32f10x_sdio.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SDIO_DeInit PROC
;;;160      */
;;;161    void SDIO_DeInit(void)
000000  2000              MOVS     r0,#0
;;;162    {
;;;163      SDIO->POWER = 0x00000000;
000002  496c              LDR      r1,|L1.436|
000004  6008              STR      r0,[r1,#0]
;;;164      SDIO->CLKCR = 0x00000000;
000006  6048              STR      r0,[r1,#4]
;;;165      SDIO->ARG = 0x00000000;
000008  6088              STR      r0,[r1,#8]
;;;166      SDIO->CMD = 0x00000000;
00000a  60c8              STR      r0,[r1,#0xc]
;;;167      SDIO->DTIMER = 0x00000000;
00000c  6248              STR      r0,[r1,#0x24]
;;;168      SDIO->DLEN = 0x00000000;
00000e  6288              STR      r0,[r1,#0x28]
;;;169      SDIO->DCTRL = 0x00000000;
000010  62c8              STR      r0,[r1,#0x2c]
;;;170      SDIO->ICR = 0x00C007FF;
000012  4869              LDR      r0,|L1.440|
000014  6388              STR      r0,[r1,#0x38]
;;;171      SDIO->MASK = 0x00000000;
000016  2000              MOVS     r0,#0
000018  63c8              STR      r0,[r1,#0x3c]
;;;172    }
00001a  4770              BX       lr
;;;173    
                          ENDP

                  SDIO_Init PROC
;;;181      */
;;;182    void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
00001c  2100              MOVS     r1,#0
;;;183    {
;;;184      uint32_t tmpreg = 0;
;;;185        
;;;186      /* Check the parameters */
;;;187      assert_param(IS_SDIO_CLOCK_EDGE(SDIO_InitStruct->SDIO_ClockEdge));
;;;188      assert_param(IS_SDIO_CLOCK_BYPASS(SDIO_InitStruct->SDIO_ClockBypass));
;;;189      assert_param(IS_SDIO_CLOCK_POWER_SAVE(SDIO_InitStruct->SDIO_ClockPowerSave));
;;;190      assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
;;;191      assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
;;;192       
;;;193    /*---------------------------- SDIO CLKCR Configuration ------------------------*/  
;;;194      /* Get the SDIO CLKCR value */
;;;195      tmpreg = SDIO->CLKCR;
00001e  4a65              LDR      r2,|L1.436|
000020  6851              LDR      r1,[r2,#4]
;;;196      
;;;197      /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
;;;198      tmpreg &= CLKCR_CLEAR_MASK;
000022  f64762ff          MOV      r2,#0x7eff
000026  4391              BICS     r1,r1,r2
;;;199      
;;;200      /* Set CLKDIV bits according to SDIO_ClockDiv value */
;;;201      /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
;;;202      /* Set BYPASS bit according to SDIO_ClockBypass value */
;;;203      /* Set WIDBUS bits according to SDIO_BusWide value */
;;;204      /* Set NEGEDGE bits according to SDIO_ClockEdge value */
;;;205      /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
;;;206      tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
000028  7802              LDRB     r2,[r0,#0]
00002a  68c3              LDR      r3,[r0,#0xc]
00002c  431a              ORRS     r2,r2,r3
00002e  6883              LDR      r3,[r0,#8]
000030  431a              ORRS     r2,r2,r3
000032  6903              LDR      r3,[r0,#0x10]
000034  431a              ORRS     r2,r2,r3
000036  6843              LDR      r3,[r0,#4]
000038  431a              ORRS     r2,r2,r3
00003a  6943              LDR      r3,[r0,#0x14]
00003c  431a              ORRS     r2,r2,r3
00003e  4311              ORRS     r1,r1,r2
;;;207                 SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
;;;208                 SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
;;;209      
;;;210      /* Write to SDIO CLKCR */
;;;211      SDIO->CLKCR = tmpreg;
000040  4a5c              LDR      r2,|L1.436|
000042  6051              STR      r1,[r2,#4]
;;;212    }
000044  4770              BX       lr
;;;213    
                          ENDP

                  SDIO_StructInit PROC
;;;219      */
;;;220    void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
000046  2100              MOVS     r1,#0
;;;221    {
;;;222      /* SDIO_InitStruct members default value */
;;;223      SDIO_InitStruct->SDIO_ClockDiv = 0x00;
000048  7001              STRB     r1,[r0,#0]
;;;224      SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
00004a  6041              STR      r1,[r0,#4]
;;;225      SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
00004c  6081              STR      r1,[r0,#8]
;;;226      SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
00004e  60c1              STR      r1,[r0,#0xc]
;;;227      SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
000050  6101              STR      r1,[r0,#0x10]
;;;228      SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
000052  6141              STR      r1,[r0,#0x14]
;;;229    }
000054  4770              BX       lr
;;;230    
                          ENDP

                  SDIO_ClockCmd PROC
;;;236      */
;;;237    void SDIO_ClockCmd(FunctionalState NewState)
000056  4959              LDR      r1,|L1.444|
;;;238    {
;;;239      /* Check the parameters */
;;;240      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;241      
;;;242      *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
000058  6008              STR      r0,[r1,#0]
;;;243    }
00005a  4770              BX       lr
;;;244    
                          ENDP

                  SDIO_SetPowerState PROC
;;;252      */
;;;253    void SDIO_SetPowerState(uint32_t SDIO_PowerState)
00005c  4955              LDR      r1,|L1.436|
;;;254    {
;;;255      /* Check the parameters */
;;;256      assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
;;;257      
;;;258      SDIO->POWER &= PWR_PWRCTRL_MASK;
00005e  6809              LDR      r1,[r1,#0]
000060  f0210103          BIC      r1,r1,#3
000064  4a53              LDR      r2,|L1.436|
000066  6011              STR      r1,[r2,#0]
;;;259      SDIO->POWER |= SDIO_PowerState;
000068  4611              MOV      r1,r2
00006a  6809              LDR      r1,[r1,#0]
00006c  4301              ORRS     r1,r1,r0
00006e  6011              STR      r1,[r2,#0]
;;;260    }
000070  4770              BX       lr
;;;261    
                          ENDP

                  SDIO_GetPowerState PROC
;;;270      */
;;;271    uint32_t SDIO_GetPowerState(void)
000072  4850              LDR      r0,|L1.436|
;;;272    {
;;;273      return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
000074  6800              LDR      r0,[r0,#0]
000076  f0000003          AND      r0,r0,#3
;;;274    }
00007a  4770              BX       lr
;;;275    
                          ENDP

                  SDIO_ITConfig PROC
;;;310      */
;;;311    void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
00007c  b129              CBZ      r1,|L1.138|
;;;312    {
;;;313      /* Check the parameters */
;;;314      assert_param(IS_SDIO_IT(SDIO_IT));
;;;315      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;316      
;;;317      if (NewState != DISABLE)
;;;318      {
;;;319        /* Enable the SDIO interrupts */
;;;320        SDIO->MASK |= SDIO_IT;
00007e  4a4d              LDR      r2,|L1.436|
000080  6bd2              LDR      r2,[r2,#0x3c]
000082  4302              ORRS     r2,r2,r0
000084  4b4b              LDR      r3,|L1.436|
000086  63da              STR      r2,[r3,#0x3c]
000088  e004              B        |L1.148|
                  |L1.138|
;;;321      }
;;;322      else
;;;323      {
;;;324        /* Disable the SDIO interrupts */
;;;325        SDIO->MASK &= ~SDIO_IT;
00008a  4a4a              LDR      r2,|L1.436|
00008c  6bd2              LDR      r2,[r2,#0x3c]
00008e  4382              BICS     r2,r2,r0
000090  4b48              LDR      r3,|L1.436|
000092  63da              STR      r2,[r3,#0x3c]
                  |L1.148|
;;;326      } 
;;;327    }
000094  4770              BX       lr
;;;328    
                          ENDP

                  SDIO_DMACmd PROC
;;;334      */
;;;335    void SDIO_DMACmd(FunctionalState NewState)
000096  494a              LDR      r1,|L1.448|
;;;336    {
;;;337      /* Check the parameters */
;;;338      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;339      
;;;340      *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
000098  6008              STR      r0,[r1,#0]
;;;341    }
00009a  4770              BX       lr
;;;342    
                          ENDP

                  SDIO_SendCommand PROC
;;;350      */
;;;351    void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
00009c  2100              MOVS     r1,#0
;;;352    {
;;;353      uint32_t tmpreg = 0;
;;;354      
;;;355      /* Check the parameters */
;;;356      assert_param(IS_SDIO_CMD_INDEX(SDIO_CmdInitStruct->SDIO_CmdIndex));
;;;357      assert_param(IS_SDIO_RESPONSE(SDIO_CmdInitStruct->SDIO_Response));
;;;358      assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
;;;359      assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
;;;360      
;;;361    /*---------------------------- SDIO ARG Configuration ------------------------*/
;;;362      /* Set the SDIO Argument value */
;;;363      SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
00009e  4b45              LDR      r3,|L1.436|
0000a0  6802              LDR      r2,[r0,#0]
0000a2  609a              STR      r2,[r3,#8]
;;;364      
;;;365    /*---------------------------- SDIO CMD Configuration ------------------------*/  
;;;366      /* Get the SDIO CMD value */
;;;367      tmpreg = SDIO->CMD;
0000a4  461a              MOV      r2,r3
0000a6  68d1              LDR      r1,[r2,#0xc]
;;;368      /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
;;;369      tmpreg &= CMD_CLEAR_MASK;
0000a8  f36f010a          BFC      r1,#0,#11
;;;370      /* Set CMDINDEX bits according to SDIO_CmdIndex value */
;;;371      /* Set WAITRESP bits according to SDIO_Response value */
;;;372      /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
;;;373      /* Set CPSMEN bits according to SDIO_CPSM value */
;;;374      tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
0000ac  e9d02301          LDRD     r2,r3,[r0,#4]
0000b0  431a              ORRS     r2,r2,r3
0000b2  68c3              LDR      r3,[r0,#0xc]
0000b4  431a              ORRS     r2,r2,r3
0000b6  6903              LDR      r3,[r0,#0x10]
0000b8  431a              ORRS     r2,r2,r3
0000ba  4311              ORRS     r1,r1,r2
;;;375               | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
;;;376      
;;;377      /* Write to SDIO CMD */
;;;378      SDIO->CMD = tmpreg;
0000bc  4a3d              LDR      r2,|L1.436|
0000be  60d1              STR      r1,[r2,#0xc]
;;;379    }
0000c0  4770              BX       lr
;;;380    
                          ENDP

                  SDIO_CmdStructInit PROC
;;;386      */
;;;387    void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
0000c2  2100              MOVS     r1,#0
;;;388    {
;;;389      /* SDIO_CmdInitStruct members default value */
;;;390      SDIO_CmdInitStruct->SDIO_Argument = 0x00;
0000c4  6001              STR      r1,[r0,#0]
;;;391      SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
0000c6  6041              STR      r1,[r0,#4]
;;;392      SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
0000c8  6081              STR      r1,[r0,#8]
;;;393      SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
0000ca  60c1              STR      r1,[r0,#0xc]
;;;394      SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
0000cc  6101              STR      r1,[r0,#0x10]
;;;395    }
0000ce  4770              BX       lr
;;;396    
                          ENDP

                  SDIO_GetCommandResponse PROC
;;;402      */
;;;403    uint8_t SDIO_GetCommandResponse(void)
0000d0  4838              LDR      r0,|L1.436|
;;;404    {
;;;405      return (uint8_t)(SDIO->RESPCMD);
0000d2  6900              LDR      r0,[r0,#0x10]
0000d4  b2c0              UXTB     r0,r0
;;;406    }
0000d6  4770              BX       lr
;;;407    
                          ENDP

                  SDIO_GetResponse PROC
;;;417      */
;;;418    uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
0000d8  4601              MOV      r1,r0
;;;419    {
;;;420      /* Check the parameters */
;;;421      assert_param(IS_SDIO_RESP(SDIO_RESP));
;;;422      
;;;423      return (*(__IO uint32_t *)(SDIO_RESP_ADDR + SDIO_RESP)); 
0000da  4836              LDR      r0,|L1.436|
0000dc  4408              ADD      r0,r0,r1
0000de  6940              LDR      r0,[r0,#0x14]
;;;424    }
0000e0  4770              BX       lr
;;;425    
                          ENDP

                  SDIO_DataConfig PROC
;;;433      */
;;;434    void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
0000e2  2100              MOVS     r1,#0
;;;435    {
;;;436      uint32_t tmpreg = 0;
;;;437      
;;;438      /* Check the parameters */
;;;439      assert_param(IS_SDIO_DATA_LENGTH(SDIO_DataInitStruct->SDIO_DataLength));
;;;440      assert_param(IS_SDIO_BLOCK_SIZE(SDIO_DataInitStruct->SDIO_DataBlockSize));
;;;441      assert_param(IS_SDIO_TRANSFER_DIR(SDIO_DataInitStruct->SDIO_TransferDir));
;;;442      assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
;;;443      assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));
;;;444    
;;;445    /*---------------------------- SDIO DTIMER Configuration ---------------------*/
;;;446      /* Set the SDIO Data TimeOut value */
;;;447      SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
0000e4  4b33              LDR      r3,|L1.436|
0000e6  6802              LDR      r2,[r0,#0]
0000e8  625a              STR      r2,[r3,#0x24]
;;;448    
;;;449    /*---------------------------- SDIO DLEN Configuration -----------------------*/
;;;450      /* Set the SDIO DataLength value */
;;;451      SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
0000ea  6842              LDR      r2,[r0,#4]
0000ec  629a              STR      r2,[r3,#0x28]
;;;452    
;;;453    /*---------------------------- SDIO DCTRL Configuration ----------------------*/  
;;;454      /* Get the SDIO DCTRL value */
;;;455      tmpreg = SDIO->DCTRL;
0000ee  461a              MOV      r2,r3
0000f0  6ad1              LDR      r1,[r2,#0x2c]
;;;456      /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
;;;457      tmpreg &= DCTRL_CLEAR_MASK;
0000f2  f02101f7          BIC      r1,r1,#0xf7
;;;458      /* Set DEN bit according to SDIO_DPSM value */
;;;459      /* Set DTMODE bit according to SDIO_TransferMode value */
;;;460      /* Set DTDIR bit according to SDIO_TransferDir value */
;;;461      /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
;;;462      tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
0000f6  e9d02302          LDRD     r2,r3,[r0,#8]
0000fa  431a              ORRS     r2,r2,r3
0000fc  6903              LDR      r3,[r0,#0x10]
0000fe  431a              ORRS     r2,r2,r3
000100  6943              LDR      r3,[r0,#0x14]
000102  431a              ORRS     r2,r2,r3
000104  4311              ORRS     r1,r1,r2
;;;463               | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
;;;464    
;;;465      /* Write to SDIO DCTRL */
;;;466      SDIO->DCTRL = tmpreg;
000106  4a2b              LDR      r2,|L1.436|
000108  62d1              STR      r1,[r2,#0x2c]
;;;467    }
00010a  4770              BX       lr
;;;468    
                          ENDP

                  SDIO_DataStructInit PROC
;;;474      */
;;;475    void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
00010c  f04f31ff          MOV      r1,#0xffffffff
;;;476    {
;;;477      /* SDIO_DataInitStruct members default value */
;;;478      SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
000110  6001              STR      r1,[r0,#0]
;;;479      SDIO_DataInitStruct->SDIO_DataLength = 0x00;
000112  2100              MOVS     r1,#0
000114  6041              STR      r1,[r0,#4]
;;;480      SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
000116  6081              STR      r1,[r0,#8]
;;;481      SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
000118  60c1              STR      r1,[r0,#0xc]
;;;482      SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
00011a  6101              STR      r1,[r0,#0x10]
;;;483      SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
00011c  6141              STR      r1,[r0,#0x14]
;;;484    }
00011e  4770              BX       lr
;;;485    
                          ENDP

                  SDIO_GetDataCounter PROC
;;;490      */
;;;491    uint32_t SDIO_GetDataCounter(void)
000120  4824              LDR      r0,|L1.436|
;;;492    { 
;;;493      return SDIO->DCOUNT;
000122  6b00              LDR      r0,[r0,#0x30]
;;;494    }
000124  4770              BX       lr
;;;495    
                          ENDP

                  SDIO_ReadData PROC
;;;500      */
;;;501    uint32_t SDIO_ReadData(void)
000126  4823              LDR      r0,|L1.436|
;;;502    { 
;;;503      return SDIO->FIFO;
000128  3080              ADDS     r0,r0,#0x80
00012a  6800              LDR      r0,[r0,#0]
;;;504    }
00012c  4770              BX       lr
;;;505    
                          ENDP

                  SDIO_WriteData PROC
;;;510      */
;;;511    void SDIO_WriteData(uint32_t Data)
00012e  4921              LDR      r1,|L1.436|
;;;512    { 
;;;513      SDIO->FIFO = Data;
000130  3180              ADDS     r1,r1,#0x80
000132  6008              STR      r0,[r1,#0]
;;;514    }
000134  4770              BX       lr
;;;515    
                          ENDP

                  SDIO_GetFIFOCount PROC
;;;521      */
;;;522    uint32_t SDIO_GetFIFOCount(void)
000136  481f              LDR      r0,|L1.436|
;;;523    { 
;;;524      return SDIO->FIFOCNT;
000138  6c80              LDR      r0,[r0,#0x48]
;;;525    }
00013a  4770              BX       lr
;;;526    
                          ENDP

                  SDIO_StartSDIOReadWait PROC
;;;532      */
;;;533    void SDIO_StartSDIOReadWait(FunctionalState NewState)
00013c  4920              LDR      r1,|L1.448|
;;;534    { 
;;;535      /* Check the parameters */
;;;536      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;537      
;;;538      *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
00013e  3114              ADDS     r1,r1,#0x14
000140  6008              STR      r0,[r1,#0]
;;;539    }
000142  4770              BX       lr
;;;540    
                          ENDP

                  SDIO_StopSDIOReadWait PROC
;;;546      */
;;;547    void SDIO_StopSDIOReadWait(FunctionalState NewState)
000144  491e              LDR      r1,|L1.448|
;;;548    { 
;;;549      /* Check the parameters */
;;;550      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;551      
;;;552      *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
000146  3118              ADDS     r1,r1,#0x18
000148  6008              STR      r0,[r1,#0]
;;;553    }
00014a  4770              BX       lr
;;;554    
                          ENDP

                  SDIO_SetSDIOReadWaitMode PROC
;;;562      */
;;;563    void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
00014c  491c              LDR      r1,|L1.448|
;;;564    {
;;;565      /* Check the parameters */
;;;566      assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
;;;567      
;;;568      *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
00014e  311c              ADDS     r1,r1,#0x1c
000150  6008              STR      r0,[r1,#0]
;;;569    }
000152  4770              BX       lr
;;;570    
                          ENDP

                  SDIO_SetSDIOOperation PROC
;;;576      */
;;;577    void SDIO_SetSDIOOperation(FunctionalState NewState)
000154  491a              LDR      r1,|L1.448|
;;;578    { 
;;;579      /* Check the parameters */
;;;580      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;581      
;;;582      *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
000156  3120              ADDS     r1,r1,#0x20
000158  6008              STR      r0,[r1,#0]
;;;583    }
00015a  4770              BX       lr
;;;584    
                          ENDP

                  SDIO_SendSDIOSuspendCmd PROC
;;;590      */
;;;591    void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
00015c  4919              LDR      r1,|L1.452|
;;;592    { 
;;;593      /* Check the parameters */
;;;594      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;595      
;;;596      *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
00015e  6008              STR      r0,[r1,#0]
;;;597    }
000160  4770              BX       lr
;;;598    
                          ENDP

                  SDIO_CommandCompletionCmd PROC
;;;604      */
;;;605    void SDIO_CommandCompletionCmd(FunctionalState NewState)
000162  4918              LDR      r1,|L1.452|
;;;606    { 
;;;607      /* Check the parameters */
;;;608      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;609      
;;;610      *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
000164  1d09              ADDS     r1,r1,#4
000166  6008              STR      r0,[r1,#0]
;;;611    }
000168  4770              BX       lr
;;;612    
                          ENDP

                  SDIO_CEATAITCmd PROC
;;;618      */
;;;619    void SDIO_CEATAITCmd(FunctionalState NewState)
00016a  2101              MOVS     r1,#1
;;;620    { 
;;;621      /* Check the parameters */
;;;622      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;623      
;;;624      *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
00016c  4381              BICS     r1,r1,r0
00016e  4a15              LDR      r2,|L1.452|
000170  3208              ADDS     r2,r2,#8
000172  6011              STR      r1,[r2,#0]
;;;625    }
000174  4770              BX       lr
;;;626    
                          ENDP

                  SDIO_SendCEATACmd PROC
;;;632      */
;;;633    void SDIO_SendCEATACmd(FunctionalState NewState)
000176  4913              LDR      r1,|L1.452|
;;;634    { 
;;;635      /* Check the parameters */
;;;636      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;637      
;;;638      *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
000178  310c              ADDS     r1,r1,#0xc
00017a  6008              STR      r0,[r1,#0]
;;;639    }
00017c  4770              BX       lr
;;;640    
                          ENDP

                  SDIO_GetFlagStatus PROC
;;;671      */
;;;672    FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
00017e  4601              MOV      r1,r0
;;;673    { 
;;;674      FlagStatus bitstatus = RESET;
000180  2000              MOVS     r0,#0
;;;675      
;;;676      /* Check the parameters */
;;;677      assert_param(IS_SDIO_FLAG(SDIO_FLAG));
;;;678      
;;;679      if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
000182  4a0c              LDR      r2,|L1.436|
000184  6b52              LDR      r2,[r2,#0x34]
000186  400a              ANDS     r2,r2,r1
000188  b10a              CBZ      r2,|L1.398|
;;;680      {
;;;681        bitstatus = SET;
00018a  2001              MOVS     r0,#1
00018c  e000              B        |L1.400|
                  |L1.398|
;;;682      }
;;;683      else
;;;684      {
;;;685        bitstatus = RESET;
00018e  2000              MOVS     r0,#0
                  |L1.400|
;;;686      }
;;;687      return bitstatus;
;;;688    }
000190  4770              BX       lr
;;;689    
                          ENDP

                  SDIO_ClearFlag PROC
;;;709      */
;;;710    void SDIO_ClearFlag(uint32_t SDIO_FLAG)
000192  4908              LDR      r1,|L1.436|
;;;711    { 
;;;712      /* Check the parameters */
;;;713      assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
;;;714       
;;;715      SDIO->ICR = SDIO_FLAG;
000194  6388              STR      r0,[r1,#0x38]
;;;716    }
000196  4770              BX       lr
;;;717    
                          ENDP

                  SDIO_GetITStatus PROC
;;;749      */
;;;750    ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
000198  4601              MOV      r1,r0
;;;751    { 
;;;752      ITStatus bitstatus = RESET;
00019a  2000              MOVS     r0,#0
;;;753      
;;;754      /* Check the parameters */
;;;755      assert_param(IS_SDIO_GET_IT(SDIO_IT));
;;;756      if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
00019c  4a05              LDR      r2,|L1.436|
00019e  6b52              LDR      r2,[r2,#0x34]
0001a0  400a              ANDS     r2,r2,r1
0001a2  b10a              CBZ      r2,|L1.424|
;;;757      {
;;;758        bitstatus = SET;
0001a4  2001              MOVS     r0,#1
0001a6  e000              B        |L1.426|
                  |L1.424|
;;;759      }
;;;760      else
;;;761      {
;;;762        bitstatus = RESET;
0001a8  2000              MOVS     r0,#0
                  |L1.426|
;;;763      }
;;;764      return bitstatus;
;;;765    }
0001aa  4770              BX       lr
;;;766    
                          ENDP

                  SDIO_ClearITPendingBit PROC
;;;785      */
;;;786    void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
0001ac  4901              LDR      r1,|L1.436|
;;;787    { 
;;;788      /* Check the parameters */
;;;789      assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
;;;790       
;;;791      SDIO->ICR = SDIO_IT;
0001ae  6388              STR      r0,[r1,#0x38]
;;;792    }
0001b0  4770              BX       lr
;;;793    
                          ENDP

0001b2  0000              DCW      0x0000
                  |L1.436|
                          DCD      0x40018000
                  |L1.440|
                          DCD      0x00c007ff
                  |L1.444|
                          DCD      0x423000a0
                  |L1.448|
                          DCD      0x4230058c
                  |L1.452|
                          DCD      0x423001ac
