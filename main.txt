; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\ --list_dir=.\ --depend=.\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\main.crf user\main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  itoa PROC
;;;26     
;;;27     char *itoa(int value, char *string, int radix)
000000  b5f0              PUSH     {r4-r7,lr}
;;;28     {
000002  4603              MOV      r3,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;29         int     i, d;
;;;30         int     flag = 0;
000008  2700              MOVS     r7,#0
;;;31         char    *ptr = string;
00000a  4629              MOV      r1,r5
;;;32     
;;;33         /* This implementation only works for decimal numbers. */
;;;34         if (radix != 10)
00000c  2e0a              CMP      r6,#0xa
00000e  d003              BEQ      |L1.24|
;;;35         {
;;;36             *ptr = 0;
000010  2000              MOVS     r0,#0
000012  7008              STRB     r0,[r1,#0]
;;;37             return string;
000014  4628              MOV      r0,r5
                  |L1.22|
;;;38         }
;;;39     
;;;40         if (!value)
;;;41         {
;;;42             *ptr++ = 0x30;
;;;43             *ptr = 0;
;;;44             return string;
;;;45         }
;;;46     
;;;47         /* if this is a negative value insert the minus sign. */
;;;48         if (value < 0)
;;;49         {
;;;50             *ptr++ = '-';
;;;51     
;;;52             /* Make the value positive. */
;;;53             value *= -1;
;;;54         }
;;;55     
;;;56         for (i = 10000; i > 0; i /= 10)
;;;57         {
;;;58             d = value / i;
;;;59     
;;;60             if (d || flag)
;;;61             {
;;;62                 *ptr++ = (char)(d + 0x30);
;;;63                 value -= (d * i);
;;;64                 flag = 1;
;;;65             }
;;;66         }
;;;67     
;;;68         /* Null terminate the string. */
;;;69         *ptr = 0;
;;;70     
;;;71         return string;
;;;72     
;;;73     } /* NCL_Itoa */
000016  bdf0              POP      {r4-r7,pc}
                  |L1.24|
000018  b933              CBNZ     r3,|L1.40|
00001a  2030              MOVS     r0,#0x30              ;42
00001c  f8010b01          STRB     r0,[r1],#1            ;42
000020  2000              MOVS     r0,#0                 ;43
000022  7008              STRB     r0,[r1,#0]            ;43
000024  4628              MOV      r0,r5                 ;44
000026  e7f6              B        |L1.22|
                  |L1.40|
000028  2b00              CMP      r3,#0                 ;48
00002a  da03              BGE      |L1.52|
00002c  202d              MOVS     r0,#0x2d              ;50
00002e  f8010b01          STRB     r0,[r1],#1            ;50
000032  425b              RSBS     r3,r3,#0              ;53
                  |L1.52|
000034  f2427210          MOV      r2,#0x2710            ;56
000038  e00d              B        |L1.86|
                  |L1.58|
00003a  fb93f4f2          SDIV     r4,r3,r2              ;58
00003e  b904              CBNZ     r4,|L1.66|
000040  b137              CBZ      r7,|L1.80|
                  |L1.66|
000042  f1040030          ADD      r0,r4,#0x30           ;62
000046  f8010b01          STRB     r0,[r1],#1            ;62
00004a  fb043312          MLS      r3,r4,r2,r3           ;63
00004e  2701              MOVS     r7,#1                 ;64
                  |L1.80|
000050  200a              MOVS     r0,#0xa               ;56
000052  fb92f2f0          SDIV     r2,r2,r0              ;56
                  |L1.86|
000056  2a00              CMP      r2,#0                 ;56
000058  dcef              BGT      |L1.58|
00005a  2000              MOVS     r0,#0                 ;69
00005c  7008              STRB     r0,[r1,#0]            ;69
00005e  4628              MOV      r0,r5                 ;71
000060  e7d9              B        |L1.22|
;;;74     
                          ENDP

                  RCC_Configuration PROC
;;;264    
;;;265    void RCC_Configuration(void)
000062  b510              PUSH     {r4,lr}
;;;266    {   
;;;267      /* Setup the microcontroller system. Initialize the Embedded Flash Interface,  
;;;268         initialize the PLL and update the SystemFrequency variable. */
;;;269      SystemInit();
000064  f7fffffe          BL       SystemInit
;;;270    }
000068  bd10              POP      {r4,pc}
;;;271    
                          ENDP

                  IO_Init PROC
;;;75     
;;;76     void IO_Init()
00006a  b510              PUSH     {r4,lr}
;;;77     {
;;;78     	RCC_Configuration();   
00006c  f7fffffe          BL       RCC_Configuration
;;;79     	RCC ->APB2ENR = 0x00004044;  //GPIOA,E,USART1
000070  f2440044          MOV      r0,#0x4044
000074  49fd              LDR      r1,|L1.1132|
000076  6188              STR      r0,[r1,#0x18]
;;;80     	GPIOA->CRH = 0x444444b4;
000078  48fd              LDR      r0,|L1.1136|
00007a  49fe              LDR      r1,|L1.1140|
00007c  6008              STR      r0,[r1,#0]
;;;81     }
00007e  bd10              POP      {r4,pc}
;;;82     
                          ENDP

                  Timer_Init PROC
;;;83     void Timer_Init(u16 arr,u16 psc)
000080  4afa              LDR      r2,|L1.1132|
;;;84     {    
;;;85     	RCC->APB2ENR|= 1<<2;			//GPIOA时钟使能
000082  6992              LDR      r2,[r2,#0x18]
000084  f0420204          ORR      r2,r2,#4
000088  4bf8              LDR      r3,|L1.1132|
00008a  619a              STR      r2,[r3,#0x18]
;;;86     	RCC->APB1ENR |=1<<1;      //TIM3时钟使能     
00008c  461a              MOV      r2,r3
00008e  69d2              LDR      r2,[r2,#0x1c]
000090  f0420202          ORR      r2,r2,#2
000094  61da              STR      r2,[r3,#0x1c]
;;;87     	GPIOA->CRL&=0X0FFFFFFF;//PA7输出
000096  4af7              LDR      r2,|L1.1140|
000098  1f12              SUBS     r2,r2,#4
00009a  6812              LDR      r2,[r2,#0]
00009c  f0224270          BIC      r2,r2,#0xf0000000
0000a0  4bf4              LDR      r3,|L1.1140|
0000a2  1f1b              SUBS     r3,r3,#4
0000a4  601a              STR      r2,[r3,#0]
;;;88     	GPIOA->CRL|=0XB0000000;//复用功能输出 PWM模式 
0000a6  461a              MOV      r2,r3
0000a8  6812              LDR      r2,[r2,#0]
0000aa  f0424230          ORR      r2,r2,#0xb0000000
0000ae  601a              STR      r2,[r3,#0]
;;;89     		
;;;90     	
;;;91     	TIM3->ARR=arr;  //设定计数器自动重装值 
0000b0  4af1              LDR      r2,|L1.1144|
0000b2  8010              STRH     r0,[r2,#0]
;;;92     	TIM3->PSC=psc;  //预分频器
0000b4  1f12              SUBS     r2,r2,#4
0000b6  8011              STRH     r1,[r2,#0]
;;;93     	
;;;94     	TIM3->CCMR1|=7<<12;  //CH2 PWM2模式（高电平为占空比）  
0000b8  4aef              LDR      r2,|L1.1144|
0000ba  3a14              SUBS     r2,r2,#0x14
0000bc  8812              LDRH     r2,[r2,#0]
0000be  f44242e0          ORR      r2,r2,#0x7000
0000c2  4bed              LDR      r3,|L1.1144|
0000c4  3b14              SUBS     r3,r3,#0x14
0000c6  801a              STRH     r2,[r3,#0]
;;;95     	TIM3->CCMR1|=1<<11; //CH2预装载使能    
0000c8  461a              MOV      r2,r3
0000ca  8812              LDRH     r2,[r2,#0]
0000cc  f4426200          ORR      r2,r2,#0x800
0000d0  801a              STRH     r2,[r3,#0]
;;;96     	TIM3->CCER|=1<<4;   //OC2 输出使能    
0000d2  4ae9              LDR      r2,|L1.1144|
0000d4  3a0c              SUBS     r2,r2,#0xc
0000d6  8812              LDRH     r2,[r2,#0]
0000d8  f0420210          ORR      r2,r2,#0x10
0000dc  4be6              LDR      r3,|L1.1144|
0000de  3b0c              SUBS     r3,r3,#0xc
0000e0  801a              STRH     r2,[r3,#0]
;;;97     	TIM3->CR1=0x8000;   //ARPE使能 
0000e2  13da              ASRS     r2,r3,#15
0000e4  4be4              LDR      r3,|L1.1144|
0000e6  3b2c              SUBS     r3,r3,#0x2c
0000e8  801a              STRH     r2,[r3,#0]
;;;98     	TIM3->CR1|=0x01;    //开定时器3    
0000ea  461a              MOV      r2,r3
0000ec  8812              LDRH     r2,[r2,#0]
0000ee  f0420201          ORR      r2,r2,#1
0000f2  801a              STRH     r2,[r3,#0]
;;;99     }       
0000f4  4770              BX       lr
;;;100    
                          ENDP

                  Timer_Config PROC
;;;101    void Timer_Config(bool mode,int freq,int duty)
0000f6  b510              PUSH     {r4,lr}
;;;102    {
;;;103    	switch(mode){
0000f8  b110              CBZ      r0,|L1.256|
0000fa  2801              CMP      r0,#1
0000fc  d124              BNE      |L1.328|
0000fe  e011              B        |L1.292|
                  |L1.256|
;;;104    		case 0:
;;;105    			TIM3->CNT = 0;
000100  2300              MOVS     r3,#0
000102  4cdd              LDR      r4,|L1.1144|
000104  3c08              SUBS     r4,r4,#8
000106  8023              STRH     r3,[r4,#0]
;;;106    			TIM3->ARR = 100000 / freq;
000108  4bdc              LDR      r3,|L1.1148|
00010a  fb93f3f1          SDIV     r3,r3,r1
00010e  4cda              LDR      r4,|L1.1144|
000110  8023              STRH     r3,[r4,#0]
;;;107    			TIM3->CCR2 = (1000 / freq) * duty;
000112  f44f737a          MOV      r3,#0x3e8
000116  fb93f3f1          SDIV     r3,r3,r1
00011a  4353              MULS     r3,r2,r3
00011c  4cd6              LDR      r4,|L1.1144|
00011e  340c              ADDS     r4,r4,#0xc
000120  8023              STRH     r3,[r4,#0]
;;;108    		break;
000122  e011              B        |L1.328|
                  |L1.292|
;;;109    		case 1:
;;;110    			TIM3->CNT = 0;
000124  2300              MOVS     r3,#0
000126  4cd4              LDR      r4,|L1.1144|
000128  3c08              SUBS     r4,r4,#8
00012a  8023              STRH     r3,[r4,#0]
;;;111    			TIM3->ARR = 10000 / freq;
00012c  f2427310          MOV      r3,#0x2710
000130  fb93f3f1          SDIV     r3,r3,r1
000134  4cd0              LDR      r4,|L1.1144|
000136  8023              STRH     r3,[r4,#0]
;;;112    			TIM3->CCR2 = (100 / freq) * duty;
000138  2364              MOVS     r3,#0x64
00013a  fb93f3f1          SDIV     r3,r3,r1
00013e  4353              MULS     r3,r2,r3
000140  4ccd              LDR      r4,|L1.1144|
000142  340c              ADDS     r4,r4,#0xc
000144  8023              STRH     r3,[r4,#0]
;;;113    		break;
000146  bf00              NOP      
                  |L1.328|
000148  bf00              NOP                            ;108
;;;114    	}
;;;115    }
00014a  bd10              POP      {r4,pc}
;;;116    void OnChip_SerialPort_Init(USART_TypeDef* USARTx)
                          ENDP

                  OnChip_SerialPort_Init PROC
00014c  b51f              PUSH     {r0-r4,lr}
;;;117    {
00014e  4604              MOV      r4,r0
;;;118    	GPIO_InitTypeDef GPIO_InitStructure;
;;;119    	USART_InitTypeDef USART_InitStructure;
;;;120    	
;;;121    	USART_InitStructure.USART_BaudRate = 115200;						//速率115200bps
000150  f44f30e1          MOV      r0,#0x1c200
000154  9000              STR      r0,[sp,#0]
;;;122      USART_InitStructure.USART_WordLength = USART_WordLength_8b;		//数据位8位
000156  2000              MOVS     r0,#0
000158  f8ad0004          STRH     r0,[sp,#4]
;;;123      USART_InitStructure.USART_StopBits = USART_StopBits_1;			//停止位1位
00015c  f8ad0006          STRH     r0,[sp,#6]
;;;124      USART_InitStructure.USART_Parity = USART_Parity_No;				//无校验位
000160  f8ad0008          STRH     r0,[sp,#8]
;;;125      USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;   //无硬件流控
000164  f8ad000c          STRH     r0,[sp,#0xc]
;;;126      USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;					//收发模式
000168  200c              MOVS     r0,#0xc
00016a  f8ad000a          STRH     r0,[sp,#0xa]
;;;127    
;;;128      /* Configure USART1 */
;;;129      USART_Init(USARTx, &USART_InitStructure);							//配置串口参数函数
00016e  4669              MOV      r1,sp
000170  4620              MOV      r0,r4
000172  f7fffffe          BL       USART_Init
;;;130       
;;;131      /* Enable USART1 Receive and Transmit interrupts */
;;;132      USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);                    //使能接收中断
000176  2201              MOVS     r2,#1
000178  f2405125          MOV      r1,#0x525
00017c  48c0              LDR      r0,|L1.1152|
00017e  f7fffffe          BL       USART_ITConfig
;;;133      USART_ITConfig(USART1, USART_IT_TXE, ENABLE);						//使能发送缓冲空中断   
000182  2201              MOVS     r2,#1
000184  f2407127          MOV      r1,#0x727
000188  48bd              LDR      r0,|L1.1152|
00018a  f7fffffe          BL       USART_ITConfig
;;;134    
;;;135      /* Enable the USART1 */
;;;136      USART_Cmd(USART1, ENABLE);	
00018e  2101              MOVS     r1,#1
000190  48bb              LDR      r0,|L1.1152|
000192  f7fffffe          BL       USART_Cmd
;;;137    }
000196  bd1f              POP      {r0-r4,pc}
;;;138    
                          ENDP

                  USART_OUT PROC
;;;139    void USART_OUT(USART_TypeDef* USARTx, uint8_t *Data,...){ 
000198  b40f              PUSH     {r0-r3}
00019a  b570              PUSH     {r4-r6,lr}
00019c  b086              SUB      sp,sp,#0x18
00019e  4606              MOV      r6,r0
;;;140    	const char *s;
;;;141        int d;
;;;142        char buf[16];
;;;143        va_list ap;
;;;144        va_start(ap, Data);
0001a0  a80c              ADD      r0,sp,#0x30
0001a2  9001              STR      r0,[sp,#4]
;;;145    
;;;146    	while(*Data!=0){				                          //判断是否到达字符串结束符
0001a4  e073              B        |L1.654|
                  |L1.422|
;;;147    		if(*Data==0x5c){									  //'\'
0001a6  980b              LDR      r0,[sp,#0x2c]
0001a8  7800              LDRB     r0,[r0,#0]
0001aa  285c              CMP      r0,#0x5c
0001ac  d11c              BNE      |L1.488|
;;;148    			switch (*++Data){
0001ae  980b              LDR      r0,[sp,#0x2c]
0001b0  1c40              ADDS     r0,r0,#1
0001b2  900b              STR      r0,[sp,#0x2c]
0001b4  7800              LDRB     r0,[r0,#0]
0001b6  286e              CMP      r0,#0x6e
0001b8  d009              BEQ      |L1.462|
0001ba  2872              CMP      r0,#0x72
0001bc  d10f              BNE      |L1.478|
;;;149    				case 'r':							          //回车符
;;;150    					USART_SendData(USARTx, 0x0d);	   
0001be  210d              MOVS     r1,#0xd
0001c0  4630              MOV      r0,r6
0001c2  f7fffffe          BL       USART_SendData
;;;151    
;;;152    					Data++;
0001c6  980b              LDR      r0,[sp,#0x2c]
0001c8  1c40              ADDS     r0,r0,#1
0001ca  900b              STR      r0,[sp,#0x2c]
;;;153    					break;
0001cc  e00b              B        |L1.486|
                  |L1.462|
;;;154    				case 'n':							          //换行符
;;;155    					USART_SendData(USARTx, 0x0a);	
0001ce  210a              MOVS     r1,#0xa
0001d0  4630              MOV      r0,r6
0001d2  f7fffffe          BL       USART_SendData
;;;156    					Data++;
0001d6  980b              LDR      r0,[sp,#0x2c]
0001d8  1c40              ADDS     r0,r0,#1
0001da  900b              STR      r0,[sp,#0x2c]
;;;157    					break;
0001dc  e003              B        |L1.486|
                  |L1.478|
;;;158    				
;;;159    				default:
;;;160    					Data++;
0001de  980b              LDR      r0,[sp,#0x2c]
0001e0  1c40              ADDS     r0,r0,#1
0001e2  900b              STR      r0,[sp,#0x2c]
;;;161    				    break;
0001e4  bf00              NOP      
                  |L1.486|
0001e6  e04b              B        |L1.640|
                  |L1.488|
;;;162    			}
;;;163    		}
;;;164    		else if(*Data=='%'){									  //
0001e8  980b              LDR      r0,[sp,#0x2c]
0001ea  7800              LDRB     r0,[r0,#0]
0001ec  2825              CMP      r0,#0x25
0001ee  d140              BNE      |L1.626|
;;;165    			switch (*++Data){				
0001f0  980b              LDR      r0,[sp,#0x2c]
0001f2  1c40              ADDS     r0,r0,#1
0001f4  900b              STR      r0,[sp,#0x2c]
0001f6  7800              LDRB     r0,[r0,#0]
0001f8  2864              CMP      r0,#0x64
0001fa  d018              BEQ      |L1.558|
0001fc  2873              CMP      r0,#0x73
0001fe  d133              BNE      |L1.616|
;;;166    				case 's':										  //字符串
;;;167                    	s = va_arg(ap, const char *);
000200  9801              LDR      r0,[sp,#4]
000202  c810              LDM      r0!,{r4}
000204  9001              STR      r0,[sp,#4]
;;;168                    	for ( ; *s; s++) {
000206  e00b              B        |L1.544|
                  |L1.520|
;;;169                        	USART_SendData(USARTx,*s);
000208  7821              LDRB     r1,[r4,#0]
00020a  4630              MOV      r0,r6
00020c  f7fffffe          BL       USART_SendData
;;;170    						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
000210  bf00              NOP      
                  |L1.530|
000212  2140              MOVS     r1,#0x40
000214  4630              MOV      r0,r6
000216  f7fffffe          BL       USART_GetFlagStatus
00021a  2800              CMP      r0,#0
00021c  d0f9              BEQ      |L1.530|
00021e  1c64              ADDS     r4,r4,#1              ;168
                  |L1.544|
000220  7820              LDRB     r0,[r4,#0]            ;168
000222  2800              CMP      r0,#0                 ;168
000224  d1f0              BNE      |L1.520|
;;;171                    	}
;;;172    					Data++;
000226  980b              LDR      r0,[sp,#0x2c]
000228  1c40              ADDS     r0,r0,#1
00022a  900b              STR      r0,[sp,#0x2c]
;;;173                    	break;
00022c  e020              B        |L1.624|
                  |L1.558|
;;;174                	case 'd':										  //十进制
;;;175                    	d = va_arg(ap, int);
00022e  9801              LDR      r0,[sp,#4]
000230  c820              LDM      r0!,{r5}
000232  9001              STR      r0,[sp,#4]
;;;176                    	itoa(d, buf, 10);
000234  220a              MOVS     r2,#0xa
000236  a902              ADD      r1,sp,#8
000238  4628              MOV      r0,r5
00023a  f7fffffe          BL       itoa
;;;177                    	for (s = buf; *s; s++) {
00023e  ac02              ADD      r4,sp,#8
000240  e00b              B        |L1.602|
                  |L1.578|
;;;178                        	USART_SendData(USARTx,*s);
000242  7821              LDRB     r1,[r4,#0]
000244  4630              MOV      r0,r6
000246  f7fffffe          BL       USART_SendData
;;;179    						while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
00024a  bf00              NOP      
                  |L1.588|
00024c  2140              MOVS     r1,#0x40
00024e  4630              MOV      r0,r6
000250  f7fffffe          BL       USART_GetFlagStatus
000254  2800              CMP      r0,#0
000256  d0f9              BEQ      |L1.588|
000258  1c64              ADDS     r4,r4,#1              ;177
                  |L1.602|
00025a  7820              LDRB     r0,[r4,#0]            ;177
00025c  2800              CMP      r0,#0                 ;177
00025e  d1f0              BNE      |L1.578|
;;;180                    	}
;;;181    					Data++;
000260  980b              LDR      r0,[sp,#0x2c]
000262  1c40              ADDS     r0,r0,#1
000264  900b              STR      r0,[sp,#0x2c]
;;;182                    	break;
000266  e003              B        |L1.624|
                  |L1.616|
;;;183    				default:
;;;184    					Data++;
000268  980b              LDR      r0,[sp,#0x2c]
00026a  1c40              ADDS     r0,r0,#1
00026c  900b              STR      r0,[sp,#0x2c]
;;;185    				    break;
00026e  bf00              NOP      
                  |L1.624|
000270  e006              B        |L1.640|
                  |L1.626|
;;;186    			}		 
;;;187    		}
;;;188    		else USART_SendData(USARTx, *Data++);
000272  980b              LDR      r0,[sp,#0x2c]
000274  f8101b01          LDRB     r1,[r0],#1
000278  900b              STR      r0,[sp,#0x2c]
00027a  4630              MOV      r0,r6
00027c  f7fffffe          BL       USART_SendData
                  |L1.640|
;;;189    		while(USART_GetFlagStatus(USARTx, USART_FLAG_TC)==RESET);
000280  bf00              NOP      
                  |L1.642|
000282  2140              MOVS     r1,#0x40
000284  4630              MOV      r0,r6
000286  f7fffffe          BL       USART_GetFlagStatus
00028a  2800              CMP      r0,#0
00028c  d0f9              BEQ      |L1.642|
                  |L1.654|
00028e  980b              LDR      r0,[sp,#0x2c]         ;146
000290  7800              LDRB     r0,[r0,#0]            ;146
000292  2800              CMP      r0,#0                 ;146
000294  d187              BNE      |L1.422|
;;;190    	}
;;;191    }
000296  b006              ADD      sp,sp,#0x18
000298  bc70              POP      {r4-r6}
00029a  f85dfb14          LDR      pc,[sp],#0x14
;;;192    
                          ENDP

                  Delay PROC
;;;272    
;;;273    void Delay(__IO uint32_t nCount)
00029e  b501              PUSH     {r0,lr}
;;;274    {
;;;275      for(; nCount != 0; nCount--);
0002a0  e002              B        |L1.680|
                  |L1.674|
0002a2  9800              LDR      r0,[sp,#0]
0002a4  1e40              SUBS     r0,r0,#1
0002a6  9000              STR      r0,[sp,#0]
                  |L1.680|
0002a8  9800              LDR      r0,[sp,#0]
0002aa  2800              CMP      r0,#0
0002ac  d1f9              BNE      |L1.674|
;;;276    }
0002ae  bd08              POP      {r3,pc}
;;;277    
                          ENDP

                  KeyEvent_Handler PROC
;;;192    
;;;193    void KeyEvent_Handler(u8 input)
0002b0  b510              PUSH     {r4,lr}
;;;194    {
0002b2  4604              MOV      r4,r0
;;;195    	switch(input)
0002b4  b134              CBZ      r4,|L1.708|
0002b6  2c01              CMP      r4,#1
0002b8  d010              BEQ      |L1.732|
0002ba  2c02              CMP      r4,#2
0002bc  d01a              BEQ      |L1.756|
0002be  2c03              CMP      r4,#3
0002c0  d130              BNE      |L1.804|
0002c2  e023              B        |L1.780|
                  |L1.708|
;;;196    	{
;;;197    		case EVENT_FP:PWM2_Freq += 10;SettingChanged_Flag = 1;
0002c4  486f              LDR      r0,|L1.1156|
0002c6  6800              LDR      r0,[r0,#0]  ; PWM2_Freq
0002c8  300a              ADDS     r0,r0,#0xa
0002ca  496e              LDR      r1,|L1.1156|
0002cc  6008              STR      r0,[r1,#0]  ; PWM2_Freq
0002ce  2001              MOVS     r0,#1
0002d0  496d              LDR      r1,|L1.1160|
0002d2  7008              STRB     r0,[r1,#0]
;;;198    			Delay(700000);break;
0002d4  486d              LDR      r0,|L1.1164|
0002d6  f7fffffe          BL       Delay
0002da  e024              B        |L1.806|
                  |L1.732|
;;;199    		case EVENT_FN:PWM2_Freq -= 10;SettingChanged_Flag = 1;
0002dc  4869              LDR      r0,|L1.1156|
0002de  6800              LDR      r0,[r0,#0]  ; PWM2_Freq
0002e0  380a              SUBS     r0,r0,#0xa
0002e2  4968              LDR      r1,|L1.1156|
0002e4  6008              STR      r0,[r1,#0]  ; PWM2_Freq
0002e6  2001              MOVS     r0,#1
0002e8  4967              LDR      r1,|L1.1160|
0002ea  7008              STRB     r0,[r1,#0]
;;;200    			Delay(700000);break;
0002ec  4867              LDR      r0,|L1.1164|
0002ee  f7fffffe          BL       Delay
0002f2  e018              B        |L1.806|
                  |L1.756|
;;;201    		case EVENT_DP:PWM2_DutyPrecentage += 1;SettingChanged_Flag = 1;
0002f4  4866              LDR      r0,|L1.1168|
0002f6  6800              LDR      r0,[r0,#0]  ; PWM2_DutyPrecentage
0002f8  1c40              ADDS     r0,r0,#1
0002fa  4965              LDR      r1,|L1.1168|
0002fc  6008              STR      r0,[r1,#0]  ; PWM2_DutyPrecentage
0002fe  2001              MOVS     r0,#1
000300  4961              LDR      r1,|L1.1160|
000302  7008              STRB     r0,[r1,#0]
;;;202    			Delay(400000);break;
000304  4863              LDR      r0,|L1.1172|
000306  f7fffffe          BL       Delay
00030a  e00c              B        |L1.806|
                  |L1.780|
;;;203    		case EVENT_DN:PWM2_DutyPrecentage -= 1;SettingChanged_Flag = 1;
00030c  4860              LDR      r0,|L1.1168|
00030e  6800              LDR      r0,[r0,#0]  ; PWM2_DutyPrecentage
000310  1e40              SUBS     r0,r0,#1
000312  495f              LDR      r1,|L1.1168|
000314  6008              STR      r0,[r1,#0]  ; PWM2_DutyPrecentage
000316  2001              MOVS     r0,#1
000318  495b              LDR      r1,|L1.1160|
00031a  7008              STRB     r0,[r1,#0]
;;;204    			Delay(400000);break;
00031c  485d              LDR      r0,|L1.1172|
00031e  f7fffffe          BL       Delay
000322  e000              B        |L1.806|
                  |L1.804|
;;;205    		default:break;
000324  bf00              NOP      
                  |L1.806|
000326  bf00              NOP                            ;198
;;;206    	}	
;;;207    	if(PWM2_Freq>=1000)PWM2_Freq=1000;
000328  4856              LDR      r0,|L1.1156|
00032a  6800              LDR      r0,[r0,#0]  ; PWM2_Freq
00032c  f5b07f7a          CMP      r0,#0x3e8
000330  db03              BLT      |L1.826|
000332  f44f707a          MOV      r0,#0x3e8
000336  4953              LDR      r1,|L1.1156|
000338  6008              STR      r0,[r1,#0]  ; PWM2_Freq
                  |L1.826|
;;;208    	if(PWM2_Freq<=0){
00033a  4852              LDR      r0,|L1.1156|
00033c  6800              LDR      r0,[r0,#0]  ; PWM2_Freq
00033e  2800              CMP      r0,#0
000340  dc08              BGT      |L1.852|
;;;209    		PWM2_Freq=1;
000342  2001              MOVS     r0,#1
000344  494f              LDR      r1,|L1.1156|
000346  6008              STR      r0,[r1,#0]  ; PWM2_Freq
;;;210    		Timer_Init(1000,7199);
000348  f641411f          MOV      r1,#0x1c1f
00034c  f44f707a          MOV      r0,#0x3e8
000350  f7fffffe          BL       Timer_Init
                  |L1.852|
;;;211    	}
;;;212    	if(PWM2_Freq == 11){
000354  484b              LDR      r0,|L1.1156|
000356  6800              LDR      r0,[r0,#0]  ; PWM2_Freq
000358  280b              CMP      r0,#0xb
00035a  d108              BNE      |L1.878|
;;;213    		PWM2_Freq=10;
00035c  200a              MOVS     r0,#0xa
00035e  4949              LDR      r1,|L1.1156|
000360  6008              STR      r0,[r1,#0]  ; PWM2_Freq
;;;214    		Timer_Init(1000,719);
000362  f24021cf          MOV      r1,#0x2cf
000366  f44f707a          MOV      r0,#0x3e8
00036a  f7fffffe          BL       Timer_Init
                  |L1.878|
;;;215    	}
;;;216    	if(PWM2_DutyPrecentage>=100)PWM2_DutyPrecentage=100;
00036e  4848              LDR      r0,|L1.1168|
000370  6800              LDR      r0,[r0,#0]  ; PWM2_DutyPrecentage
000372  2864              CMP      r0,#0x64
000374  db02              BLT      |L1.892|
000376  2064              MOVS     r0,#0x64
000378  4945              LDR      r1,|L1.1168|
00037a  6008              STR      r0,[r1,#0]  ; PWM2_DutyPrecentage
                  |L1.892|
;;;217    	if(PWM2_DutyPrecentage<=0)PWM2_DutyPrecentage=0;
00037c  4844              LDR      r0,|L1.1168|
00037e  6800              LDR      r0,[r0,#0]  ; PWM2_DutyPrecentage
000380  2800              CMP      r0,#0
000382  dc02              BGT      |L1.906|
000384  2000              MOVS     r0,#0
000386  4942              LDR      r1,|L1.1168|
000388  6008              STR      r0,[r1,#0]  ; PWM2_DutyPrecentage
                  |L1.906|
;;;218    }
00038a  bd10              POP      {r4,pc}
;;;219    
                          ENDP

                  Hardware_GPU_ShowStatus_Internal PROC
;;;220    void Hardware_GPU_ShowStatus_Internal(int frequency,int duty)
00038c  b57f              PUSH     {r0-r6,lr}
;;;221    {
00038e  4605              MOV      r5,r0
000390  460c              MOV      r4,r1
;;;222    	char frequency_String[5];
;;;223    	char duty_String[5];
;;;224    	itoa(frequency,frequency_String,10);
000392  220a              MOVS     r2,#0xa
000394  a902              ADD      r1,sp,#8
000396  4628              MOV      r0,r5
000398  f7fffffe          BL       itoa
;;;225    	itoa(duty,duty_String,10);
00039c  220a              MOVS     r2,#0xa
00039e  4669              MOV      r1,sp
0003a0  4620              MOV      r0,r4
0003a2  f7fffffe          BL       itoa
;;;226    	USART_OUT(USART1,"输出频率: ");
0003a6  a13c              ADR      r1,|L1.1176|
0003a8  4835              LDR      r0,|L1.1152|
0003aa  f7fffffe          BL       USART_OUT
;;;227    	USART_OUT(USART1,frequency_String);
0003ae  a902              ADD      r1,sp,#8
0003b0  4833              LDR      r0,|L1.1152|
0003b2  f7fffffe          BL       USART_OUT
;;;228    	USART_OUT(USART1," 赫兹 , 占空比: 百分之");
0003b6  a13b              ADR      r1,|L1.1188|
0003b8  4831              LDR      r0,|L1.1152|
0003ba  f7fffffe          BL       USART_OUT
;;;229    	USART_OUT(USART1,duty_String);
0003be  4669              MOV      r1,sp
0003c0  482f              LDR      r0,|L1.1152|
0003c2  f7fffffe          BL       USART_OUT
;;;230    	USART_OUT(USART1,"           \n");
0003c6  a13d              ADR      r1,|L1.1212|
0003c8  482d              LDR      r0,|L1.1152|
0003ca  f7fffffe          BL       USART_OUT
;;;231    }
0003ce  bd7f              POP      {r0-r6,pc}
;;;232    
                          ENDP

                  main PROC
;;;233    int main(void)
0003d0  f7fffffe          BL       IO_Init
;;;234    {
;;;235    	u16 KeyInputBuffer;
;;;236    	IO_Init();
;;;237    	OnChip_SerialPort_Init(USART1);
0003d4  482a              LDR      r0,|L1.1152|
0003d6  f7fffffe          BL       OnChip_SerialPort_Init
;;;238    	Timer_Init(1000,719);
0003da  f24021cf          MOV      r1,#0x2cf
0003de  f44f707a          MOV      r0,#0x3e8
0003e2  f7fffffe          BL       Timer_Init
;;;239    	Timer_Config(0,PWM2_Freq,PWM2_DutyPrecentage);
0003e6  482a              LDR      r0,|L1.1168|
0003e8  6802              LDR      r2,[r0,#0]  ; PWM2_DutyPrecentage
0003ea  4826              LDR      r0,|L1.1156|
0003ec  6801              LDR      r1,[r0,#0]  ; PWM2_Freq
0003ee  2000              MOVS     r0,#0
0003f0  f7fffffe          BL       Timer_Config
;;;240    	Delay(2000000);
0003f4  4835              LDR      r0,|L1.1228|
0003f6  f7fffffe          BL       Delay
;;;241    	USART_OUT(USART1," 武汉工程大学智能车团队 PWM信号发生器 (2017/01/06)\r\n\r\n"); 
0003fa  a135              ADR      r1,|L1.1232|
0003fc  4820              LDR      r0,|L1.1152|
0003fe  f7fffffe          BL       USART_OUT
;;;242      Hardware_GPU_ShowStatus_Internal(PWM2_Freq,PWM2_DutyPrecentage);
000402  4823              LDR      r0,|L1.1168|
000404  6801              LDR      r1,[r0,#0]  ; PWM2_DutyPrecentage
000406  481f              LDR      r0,|L1.1156|
000408  6800              LDR      r0,[r0,#0]  ; PWM2_Freq
00040a  f7fffffe          BL       Hardware_GPU_ShowStatus_Internal
;;;243    	while(1){
00040e  e08f              B        |L1.1328|
                  |L1.1040|
;;;244    		KeyInputBuffer = GPIOE->IDR;
000410  483d              LDR      r0,|L1.1288|
000412  6800              LDR      r0,[r0,#0]
000414  b284              UXTH     r4,r0
;;;245    		if(SettingChanged_Flag)
000416  481c              LDR      r0,|L1.1160|
000418  7800              LDRB     r0,[r0,#0]  ; SettingChanged_Flag
00041a  b1d8              CBZ      r0,|L1.1108|
;;;246    		{
;;;247    			if(PWM2_Freq == 1)
00041c  4819              LDR      r0,|L1.1156|
00041e  6800              LDR      r0,[r0,#0]  ; PWM2_Freq
000420  2801              CMP      r0,#1
000422  d107              BNE      |L1.1076|
;;;248    				Timer_Config(1,PWM2_Freq,PWM2_DutyPrecentage);
000424  481a              LDR      r0,|L1.1168|
000426  6802              LDR      r2,[r0,#0]  ; PWM2_DutyPrecentage
000428  4816              LDR      r0,|L1.1156|
00042a  6801              LDR      r1,[r0,#0]  ; PWM2_Freq
00042c  2001              MOVS     r0,#1
00042e  f7fffffe          BL       Timer_Config
000432  e006              B        |L1.1090|
                  |L1.1076|
;;;249    			else
;;;250    				Timer_Config(0,PWM2_Freq,PWM2_DutyPrecentage);
000434  4816              LDR      r0,|L1.1168|
000436  6802              LDR      r2,[r0,#0]  ; PWM2_DutyPrecentage
000438  4812              LDR      r0,|L1.1156|
00043a  6801              LDR      r1,[r0,#0]  ; PWM2_Freq
00043c  2000              MOVS     r0,#0
00043e  f7fffffe          BL       Timer_Config
                  |L1.1090|
;;;251    			SettingChanged_Flag = 0;
000442  2000              MOVS     r0,#0
000444  4910              LDR      r1,|L1.1160|
000446  7008              STRB     r0,[r1,#0]
;;;252    			Hardware_GPU_ShowStatus_Internal(PWM2_Freq,PWM2_DutyPrecentage);
000448  4811              LDR      r0,|L1.1168|
00044a  6801              LDR      r1,[r0,#0]  ; PWM2_DutyPrecentage
00044c  480d              LDR      r0,|L1.1156|
00044e  6800              LDR      r0,[r0,#0]  ; PWM2_Freq
000450  f7fffffe          BL       Hardware_GPU_ShowStatus_Internal
                  |L1.1108|
;;;253    		}
;;;254    		switch(KeyInputBuffer)
000454  f5a4407f          SUB      r0,r4,#0xff00
000458  38df              SUBS     r0,r0,#0xdf
00045a  b128              CBZ      r0,|L1.1128|
00045c  2810              CMP      r0,#0x10
00045e  d062              BEQ      |L1.1318|
000460  2818              CMP      r0,#0x18
000462  d058              BEQ      |L1.1302|
000464  281c              CMP      r0,#0x1c
000466  e051              B        |L1.1292|
                  |L1.1128|
000468  e059              B        |L1.1310|
00046a  0000              DCW      0x0000
                  |L1.1132|
                          DCD      0x40021000
                  |L1.1136|
                          DCD      0x444444b4
                  |L1.1140|
                          DCD      0x40010804
                  |L1.1144|
                          DCD      0x4000042c
                  |L1.1148|
                          DCD      0x000186a0
                  |L1.1152|
                          DCD      0x40013800
                  |L1.1156|
                          DCD      PWM2_Freq
                  |L1.1160|
                          DCD      SettingChanged_Flag
                  |L1.1164|
                          DCD      0x000aae60
                  |L1.1168|
                          DCD      PWM2_DutyPrecentage
                  |L1.1172|
                          DCD      0x00061a80
                  |L1.1176|
000498  cae4b3f6          DCB      202,228,179,246,198,181,194,202,": ",0
00049c  c6b5c2ca
0004a0  3a2000  
0004a3  00                DCB      0
                  |L1.1188|
0004a4  20bad5d7          DCB      " ",186,213,215,200," , ",213,188,191,213,177,200,": ",176
0004a8  c8202c20
0004ac  d5bcbfd5
0004b0  b1c83a20
0004b4  b0      
0004b5  d9b7d6d6          DCB      217,183,214,214,174,0
0004b9  ae00    
0004bb  00                DCB      0
                  |L1.1212|
0004bc  20202020          DCB      "           \n",0
0004c0  20202020
0004c4  2020200a
0004c8  00      
0004c9  00                DCB      0
0004ca  00                DCB      0
0004cb  00                DCB      0
                  |L1.1228|
                          DCD      0x001e8480
                  |L1.1232|
0004d0  20cee4ba          DCB      " ",206,228,186,186,185,164,179,204,180,243,209,167,214,199
0004d4  bab9a4b3
0004d8  ccb4f3d1
0004dc  a7d6c7  
0004df  c4dcb3b5          DCB      196,220,179,181,205,197,182,211," PWM",208,197,186,197,183
0004e3  cdc5b6d3
0004e7  2050574d
0004eb  d0c5bac5
0004ef  b7      
0004f0  a2c9fac6          DCB      162,201,250,198,247," (2017/01/06)\r\n\r\n",0
0004f4  f7202832
0004f8  3031372f
0004fc  30312f30
000500  36290d0a
000504  0d0a00  
000507  00                DCB      0
                  |L1.1288|
                          DCD      0x40011808
                  |L1.1292|
00050c  d10f              BNE      |L1.1326|
;;;255    		{
;;;256    			case 0x0000FFFB:KeyEvent_Handler(EVENT_FP);break;
00050e  2000              MOVS     r0,#0
000510  f7fffffe          BL       KeyEvent_Handler
000514  e00b              B        |L1.1326|
                  |L1.1302|
;;;257    			case 0x0000FFF7:KeyEvent_Handler(EVENT_FN);break;
000516  2001              MOVS     r0,#1
000518  f7fffffe          BL       KeyEvent_Handler
00051c  e007              B        |L1.1326|
                  |L1.1310|
;;;258    			case 0x0000FFDF:KeyEvent_Handler(EVENT_DP);break;
00051e  2002              MOVS     r0,#2
000520  f7fffffe          BL       KeyEvent_Handler
000524  e003              B        |L1.1326|
                  |L1.1318|
;;;259    			case 0x0000FFEF:KeyEvent_Handler(EVENT_DN);break;
000526  2003              MOVS     r0,#3
000528  f7fffffe          BL       KeyEvent_Handler
00052c  bf00              NOP      
                  |L1.1326|
00052e  bf00              NOP                            ;256
                  |L1.1328|
000530  e76e              B        |L1.1040|
;;;260    		}
;;;261    	}
;;;262    }
;;;263    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  TxBuffer1
000000  55534152          DCB      0x55,0x53,0x41,0x52
000004  5420496e          DCB      0x54,0x20,0x49,0x6e
000008  74657272          DCB      0x74,0x65,0x72,0x72
00000c  75707420          DCB      0x75,0x70,0x74,0x20
000010  4578616d          DCB      0x45,0x78,0x61,0x6d
000014  706c6500          DCB      0x70,0x6c,0x65,0x00
                  RxBuffer1
000018  00                DCB      0x00
                  rec_f
000019  00                DCB      0x00
                  tx_flag
00001a  00                DCB      0x00
                  TxCounter1
00001b  00                DCB      0x00
                  RxCounter1
00001c  00000000          DCB      0x00,0x00,0x00,0x00
                  Rec_Len
                          DCD      0x00000000
                  PWM2_Freq
                          DCD      0x0000000a
                  PWM2_DutyPrecentage
                          DCD      0x00000032
                  SettingChanged_Flag
00002c  00                DCB      0x00

                  __ARM_use_no_argv EQU 0
