; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\stm32f10x_exti.o --asm_dir=.\ --list_dir=.\ --depend=.\obj\stm32f10x_exti.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\stm32f10x_exti.crf FWlib\SRC\stm32f10x_exti.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  EXTI_DeInit PROC
;;;84       */
;;;85     void EXTI_DeInit(void)
000000  2000              MOVS     r0,#0
;;;86     {
;;;87       EXTI->IMR = 0x00000000;
000002  494c              LDR      r1,|L1.308|
000004  6008              STR      r0,[r1,#0]
;;;88       EXTI->EMR = 0x00000000;
000006  1d09              ADDS     r1,r1,#4
000008  6008              STR      r0,[r1,#0]
;;;89       EXTI->RTSR = 0x00000000; 
00000a  1d09              ADDS     r1,r1,#4
00000c  6008              STR      r0,[r1,#0]
;;;90       EXTI->FTSR = 0x00000000; 
00000e  1d09              ADDS     r1,r1,#4
000010  6008              STR      r0,[r1,#0]
;;;91       EXTI->PR = 0x0007FFFF;
000012  4849              LDR      r0,|L1.312|
000014  4947              LDR      r1,|L1.308|
000016  3114              ADDS     r1,r1,#0x14
000018  6008              STR      r0,[r1,#0]
;;;92     }
00001a  4770              BX       lr
;;;93     
                          ENDP

                  EXTI_Init PROC
;;;101      */
;;;102    void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
00001c  7981              LDRB     r1,[r0,#6]
;;;103    {
;;;104      /* Check the parameters */
;;;105      assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
;;;106      assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
;;;107      assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
;;;108      assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));
;;;109         
;;;110      if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
00001e  2900              CMP      r1,#0
000020  d046              BEQ      |L1.176|
;;;111      {
;;;112        /* Clear EXTI line configuration */
;;;113        EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
000022  4944              LDR      r1,|L1.308|
000024  6809              LDR      r1,[r1,#0]
000026  6802              LDR      r2,[r0,#0]
000028  4391              BICS     r1,r1,r2
00002a  4a42              LDR      r2,|L1.308|
00002c  6011              STR      r1,[r2,#0]
;;;114        EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
00002e  1d11              ADDS     r1,r2,#4
000030  6809              LDR      r1,[r1,#0]
000032  6802              LDR      r2,[r0,#0]
000034  4391              BICS     r1,r1,r2
000036  4a3f              LDR      r2,|L1.308|
000038  1d12              ADDS     r2,r2,#4
00003a  6011              STR      r1,[r2,#0]
;;;115        
;;;116        *(__IO uint32_t *)(EXTI_BASE + (uint32_t)EXTI_InitStruct->EXTI_Mode)|= EXTI_InitStruct->EXTI_Line;
00003c  7901              LDRB     r1,[r0,#4]
00003e  4a3f              LDR      r2,|L1.316|
000040  4411              ADD      r1,r1,r2
000042  f8d11400          LDR      r1,[r1,#0x400]
000046  6802              LDR      r2,[r0,#0]
000048  4311              ORRS     r1,r1,r2
00004a  7902              LDRB     r2,[r0,#4]
00004c  4b3b              LDR      r3,|L1.316|
00004e  441a              ADD      r2,r2,r3
000050  f8c21400          STR      r1,[r2,#0x400]
;;;117        /* Clear Rising Falling edge configuration */
;;;118        EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
000054  4937              LDR      r1,|L1.308|
000056  3108              ADDS     r1,r1,#8
000058  6809              LDR      r1,[r1,#0]
00005a  6802              LDR      r2,[r0,#0]
00005c  4391              BICS     r1,r1,r2
00005e  4a35              LDR      r2,|L1.308|
000060  3208              ADDS     r2,r2,#8
000062  6011              STR      r1,[r2,#0]
;;;119        EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
000064  1d11              ADDS     r1,r2,#4
000066  6809              LDR      r1,[r1,#0]
000068  6802              LDR      r2,[r0,#0]
00006a  4391              BICS     r1,r1,r2
00006c  4a31              LDR      r2,|L1.308|
00006e  320c              ADDS     r2,r2,#0xc
000070  6011              STR      r1,[r2,#0]
;;;120        
;;;121        /* Select the trigger for the selected external interrupts */
;;;122        if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
000072  7941              LDRB     r1,[r0,#5]
000074  2910              CMP      r1,#0x10
000076  d10e              BNE      |L1.150|
;;;123        {
;;;124          /* Rising Falling edge */
;;;125          EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
000078  1f11              SUBS     r1,r2,#4
00007a  6809              LDR      r1,[r1,#0]
00007c  6802              LDR      r2,[r0,#0]
00007e  4311              ORRS     r1,r1,r2
000080  4a2c              LDR      r2,|L1.308|
000082  3208              ADDS     r2,r2,#8
000084  6011              STR      r1,[r2,#0]
;;;126          EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
000086  1d11              ADDS     r1,r2,#4
000088  6809              LDR      r1,[r1,#0]
00008a  6802              LDR      r2,[r0,#0]
00008c  4311              ORRS     r1,r1,r2
00008e  4a29              LDR      r2,|L1.308|
000090  320c              ADDS     r2,r2,#0xc
000092  6011              STR      r1,[r2,#0]
000094  e018              B        |L1.200|
                  |L1.150|
;;;127        }
;;;128        else
;;;129        {
;;;130          *(__IO uint32_t *)(EXTI_BASE + (uint32_t)EXTI_InitStruct->EXTI_Trigger)|= EXTI_InitStruct->EXTI_Line;
000096  7941              LDRB     r1,[r0,#5]
000098  4a28              LDR      r2,|L1.316|
00009a  4411              ADD      r1,r1,r2
00009c  f8d11400          LDR      r1,[r1,#0x400]
0000a0  6802              LDR      r2,[r0,#0]
0000a2  4311              ORRS     r1,r1,r2
0000a4  7942              LDRB     r2,[r0,#5]
0000a6  4b25              LDR      r3,|L1.316|
0000a8  441a              ADD      r2,r2,r3
0000aa  f8c21400          STR      r1,[r2,#0x400]
0000ae  e00b              B        |L1.200|
                  |L1.176|
;;;131        }
;;;132      }
;;;133      else
;;;134      {
;;;135        /* Disable the selected external lines */
;;;136        *(__IO uint32_t *)(EXTI_BASE + (uint32_t)EXTI_InitStruct->EXTI_Mode)&= ~EXTI_InitStruct->EXTI_Line;
0000b0  7901              LDRB     r1,[r0,#4]
0000b2  4a22              LDR      r2,|L1.316|
0000b4  4411              ADD      r1,r1,r2
0000b6  f8d11400          LDR      r1,[r1,#0x400]
0000ba  6802              LDR      r2,[r0,#0]
0000bc  4391              BICS     r1,r1,r2
0000be  7902              LDRB     r2,[r0,#4]
0000c0  4b1e              LDR      r3,|L1.316|
0000c2  441a              ADD      r2,r2,r3
0000c4  f8c21400          STR      r1,[r2,#0x400]
                  |L1.200|
;;;137      }
;;;138    }
0000c8  4770              BX       lr
;;;139    
                          ENDP

                  EXTI_StructInit PROC
;;;145      */
;;;146    void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
0000ca  2100              MOVS     r1,#0
;;;147    {
;;;148      EXTI_InitStruct->EXTI_Line = EXTI_LineNone;
0000cc  6001              STR      r1,[r0,#0]
;;;149      EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
0000ce  7101              STRB     r1,[r0,#4]
;;;150      EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
0000d0  210c              MOVS     r1,#0xc
0000d2  7141              STRB     r1,[r0,#5]
;;;151      EXTI_InitStruct->EXTI_LineCmd = DISABLE;
0000d4  2100              MOVS     r1,#0
0000d6  7181              STRB     r1,[r0,#6]
;;;152    }
0000d8  4770              BX       lr
;;;153    
                          ENDP

                  EXTI_GenerateSWInterrupt PROC
;;;161      */
;;;162    void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
0000da  4916              LDR      r1,|L1.308|
;;;163    {
;;;164      /* Check the parameters */
;;;165      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;166      
;;;167      EXTI->SWIER |= EXTI_Line;
0000dc  3110              ADDS     r1,r1,#0x10
0000de  6809              LDR      r1,[r1,#0]
0000e0  4301              ORRS     r1,r1,r0
0000e2  4a14              LDR      r2,|L1.308|
0000e4  3210              ADDS     r2,r2,#0x10
0000e6  6011              STR      r1,[r2,#0]
;;;168    }
0000e8  4770              BX       lr
;;;169    
                          ENDP

                  EXTI_GetFlagStatus PROC
;;;176      */
;;;177    FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
0000ea  4601              MOV      r1,r0
;;;178    {
;;;179      FlagStatus bitstatus = RESET;
0000ec  2000              MOVS     r0,#0
;;;180      /* Check the parameters */
;;;181      assert_param(IS_GET_EXTI_LINE(EXTI_Line));
;;;182      
;;;183      if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
0000ee  4a11              LDR      r2,|L1.308|
0000f0  3214              ADDS     r2,r2,#0x14
0000f2  6812              LDR      r2,[r2,#0]
0000f4  400a              ANDS     r2,r2,r1
0000f6  b10a              CBZ      r2,|L1.252|
;;;184      {
;;;185        bitstatus = SET;
0000f8  2001              MOVS     r0,#1
0000fa  e000              B        |L1.254|
                  |L1.252|
;;;186      }
;;;187      else
;;;188      {
;;;189        bitstatus = RESET;
0000fc  2000              MOVS     r0,#0
                  |L1.254|
;;;190      }
;;;191      return bitstatus;
;;;192    }
0000fe  4770              BX       lr
;;;193    
                          ENDP

                  EXTI_ClearFlag PROC
;;;200      */
;;;201    void EXTI_ClearFlag(uint32_t EXTI_Line)
000100  490c              LDR      r1,|L1.308|
;;;202    {
;;;203      /* Check the parameters */
;;;204      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;205      
;;;206      EXTI->PR = EXTI_Line;
000102  3114              ADDS     r1,r1,#0x14
000104  6008              STR      r0,[r1,#0]
;;;207    }
000106  4770              BX       lr
;;;208    
                          ENDP

                  EXTI_GetITStatus PROC
;;;215      */
;;;216    ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
000108  4601              MOV      r1,r0
;;;217    {
;;;218      ITStatus bitstatus = RESET;
00010a  2000              MOVS     r0,#0
;;;219      uint32_t enablestatus = 0;
00010c  2200              MOVS     r2,#0
;;;220      /* Check the parameters */
;;;221      assert_param(IS_GET_EXTI_LINE(EXTI_Line));
;;;222      
;;;223      enablestatus =  EXTI->IMR & EXTI_Line;
00010e  4b09              LDR      r3,|L1.308|
000110  681b              LDR      r3,[r3,#0]
000112  ea030201          AND      r2,r3,r1
;;;224      if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
000116  4b07              LDR      r3,|L1.308|
000118  3314              ADDS     r3,r3,#0x14
00011a  681b              LDR      r3,[r3,#0]
00011c  400b              ANDS     r3,r3,r1
00011e  b113              CBZ      r3,|L1.294|
000120  b10a              CBZ      r2,|L1.294|
;;;225      {
;;;226        bitstatus = SET;
000122  2001              MOVS     r0,#1
000124  e000              B        |L1.296|
                  |L1.294|
;;;227      }
;;;228      else
;;;229      {
;;;230        bitstatus = RESET;
000126  2000              MOVS     r0,#0
                  |L1.296|
;;;231      }
;;;232      return bitstatus;
;;;233    }
000128  4770              BX       lr
;;;234    
                          ENDP

                  EXTI_ClearITPendingBit PROC
;;;241      */
;;;242    void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
00012a  4902              LDR      r1,|L1.308|
;;;243    {
;;;244      /* Check the parameters */
;;;245      assert_param(IS_EXTI_LINE(EXTI_Line));
;;;246      
;;;247      EXTI->PR = EXTI_Line;
00012c  3114              ADDS     r1,r1,#0x14
00012e  6008              STR      r0,[r1,#0]
;;;248    }
000130  4770              BX       lr
;;;249    
                          ENDP

000132  0000              DCW      0x0000
                  |L1.308|
                          DCD      0x40010400
                  |L1.312|
                          DCD      0x0007ffff
                  |L1.316|
                          DCD      0x40010000
