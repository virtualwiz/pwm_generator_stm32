; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\stm32f10x_can.o --asm_dir=.\ --list_dir=.\ --depend=.\obj\stm32f10x_can.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\stm32f10x_can.crf FWlib\SRC\stm32f10x_can.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  CAN_DeInit PROC
;;;143      */
;;;144    void CAN_DeInit(CAN_TypeDef* CANx)
000000  b510              PUSH     {r4,lr}
;;;145    {
000002  4604              MOV      r4,r0
;;;146      /* Check the parameters */
;;;147      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;148     
;;;149      switch (*(uint32_t*)&CANx)
000004  48fe              LDR      r0,|L1.1024|
000006  4420              ADD      r0,r0,r4
000008  b948              CBNZ     r0,|L1.30|
;;;150      {
;;;151        case CAN1_BASE:
;;;152          /* Enable CAN1 reset state */
;;;153          RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  0648              LSLS     r0,r1,#25
00000e  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;154          /* Release CAN1 from reset state */
;;;155          RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
000012  2100              MOVS     r1,#0
000014  f04f7000          MOV      r0,#0x2000000
000018  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;156          break;        
00001c  e000              B        |L1.32|
                  |L1.30|
;;;157        default:
;;;158          break;
00001e  bf00              NOP      
                  |L1.32|
000020  bf00              NOP                            ;156
;;;159      }
;;;160    }
000022  bd10              POP      {r4,pc}
;;;161    
                          ENDP

                  CAN_Init PROC
;;;170      */
;;;171    uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
000024  b530              PUSH     {r4,r5,lr}
;;;172    {
000026  4602              MOV      r2,r0
;;;173      uint8_t InitStatus = CANINITFAILED;
000028  2000              MOVS     r0,#0
;;;174      uint32_t wait_ack = 0x00000000;
00002a  2300              MOVS     r3,#0
;;;175      /* Check the parameters */
;;;176      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;177      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
;;;178      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
;;;179      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
;;;180      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
;;;181      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
;;;182      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
;;;183      assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
;;;184      assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
;;;185      assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
;;;186      assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
;;;187      assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
;;;188      /* exit from sleep mode */
;;;189      CANx->MCR &= ~MCR_SLEEP;
00002c  6814              LDR      r4,[r2,#0]
00002e  f0240402          BIC      r4,r4,#2
000032  6014              STR      r4,[r2,#0]
;;;190      /* Request initialisation */
;;;191      CANx->MCR |= MCR_INRQ ;
000034  6814              LDR      r4,[r2,#0]
000036  f0440401          ORR      r4,r4,#1
00003a  6014              STR      r4,[r2,#0]
;;;192      /* Wait the acknowledge */
;;;193      while ((wait_ack != INAK_TimeOut)&&((CANx->MSR & MSR_INAK) != MSR_INAK))
00003c  e000              B        |L1.64|
                  |L1.62|
;;;194      {
;;;195        wait_ack++;
00003e  1c5b              ADDS     r3,r3,#1
                  |L1.64|
000040  f64f74ff          MOV      r4,#0xffff            ;193
000044  42a3              CMP      r3,r4                 ;193
000046  d004              BEQ      |L1.82|
000048  6854              LDR      r4,[r2,#4]            ;193
00004a  f0040401          AND      r4,r4,#1              ;193
00004e  2c00              CMP      r4,#0                 ;193
000050  d0f5              BEQ      |L1.62|
                  |L1.82|
;;;196      }
;;;197      /* ...and check acknowledged */
;;;198      if ((CANx->MSR & MSR_INAK) != MSR_INAK)
000052  6854              LDR      r4,[r2,#4]
000054  f0040401          AND      r4,r4,#1
000058  b90c              CBNZ     r4,|L1.94|
;;;199      {
;;;200        InitStatus = CANINITFAILED;
00005a  2000              MOVS     r0,#0
00005c  e06d              B        |L1.314|
                  |L1.94|
;;;201      }
;;;202      else 
;;;203      {
;;;204        /* Set the time triggered communication mode */
;;;205        if (CAN_InitStruct->CAN_TTCM == ENABLE)
00005e  780c              LDRB     r4,[r1,#0]
000060  2c01              CMP      r4,#1
000062  d104              BNE      |L1.110|
;;;206        {
;;;207          CANx->MCR |= MCR_TTCM;
000064  6814              LDR      r4,[r2,#0]
000066  f0440480          ORR      r4,r4,#0x80
00006a  6014              STR      r4,[r2,#0]
00006c  e003              B        |L1.118|
                  |L1.110|
;;;208        }
;;;209        else
;;;210        {
;;;211          CANx->MCR &= ~MCR_TTCM;
00006e  6814              LDR      r4,[r2,#0]
000070  f0240480          BIC      r4,r4,#0x80
000074  6014              STR      r4,[r2,#0]
                  |L1.118|
;;;212        }
;;;213        /* Set the automatic bus-off management */
;;;214        if (CAN_InitStruct->CAN_ABOM == ENABLE)
000076  784c              LDRB     r4,[r1,#1]
000078  2c01              CMP      r4,#1
00007a  d104              BNE      |L1.134|
;;;215        {
;;;216          CANx->MCR |= MCR_ABOM;
00007c  6814              LDR      r4,[r2,#0]
00007e  f0440440          ORR      r4,r4,#0x40
000082  6014              STR      r4,[r2,#0]
000084  e003              B        |L1.142|
                  |L1.134|
;;;217        }
;;;218        else
;;;219        {
;;;220          CANx->MCR &= ~MCR_ABOM;
000086  6814              LDR      r4,[r2,#0]
000088  f0240440          BIC      r4,r4,#0x40
00008c  6014              STR      r4,[r2,#0]
                  |L1.142|
;;;221        }
;;;222        /* Set the automatic wake-up mode */
;;;223        if (CAN_InitStruct->CAN_AWUM == ENABLE)
00008e  788c              LDRB     r4,[r1,#2]
000090  2c01              CMP      r4,#1
000092  d104              BNE      |L1.158|
;;;224        {
;;;225          CANx->MCR |= MCR_AWUM;
000094  6814              LDR      r4,[r2,#0]
000096  f0440420          ORR      r4,r4,#0x20
00009a  6014              STR      r4,[r2,#0]
00009c  e003              B        |L1.166|
                  |L1.158|
;;;226        }
;;;227        else
;;;228        {
;;;229          CANx->MCR &= ~MCR_AWUM;
00009e  6814              LDR      r4,[r2,#0]
0000a0  f0240420          BIC      r4,r4,#0x20
0000a4  6014              STR      r4,[r2,#0]
                  |L1.166|
;;;230        }
;;;231        /* Set the no automatic retransmission */
;;;232        if (CAN_InitStruct->CAN_NART == ENABLE)
0000a6  78cc              LDRB     r4,[r1,#3]
0000a8  2c01              CMP      r4,#1
0000aa  d104              BNE      |L1.182|
;;;233        {
;;;234          CANx->MCR |= MCR_NART;
0000ac  6814              LDR      r4,[r2,#0]
0000ae  f0440410          ORR      r4,r4,#0x10
0000b2  6014              STR      r4,[r2,#0]
0000b4  e003              B        |L1.190|
                  |L1.182|
;;;235        }
;;;236        else
;;;237        {
;;;238          CANx->MCR &= ~MCR_NART;
0000b6  6814              LDR      r4,[r2,#0]
0000b8  f0240410          BIC      r4,r4,#0x10
0000bc  6014              STR      r4,[r2,#0]
                  |L1.190|
;;;239        }
;;;240        /* Set the receive FIFO locked mode */
;;;241        if (CAN_InitStruct->CAN_RFLM == ENABLE)
0000be  790c              LDRB     r4,[r1,#4]
0000c0  2c01              CMP      r4,#1
0000c2  d104              BNE      |L1.206|
;;;242        {
;;;243          CANx->MCR |= MCR_RFLM;
0000c4  6814              LDR      r4,[r2,#0]
0000c6  f0440408          ORR      r4,r4,#8
0000ca  6014              STR      r4,[r2,#0]
0000cc  e003              B        |L1.214|
                  |L1.206|
;;;244        }
;;;245        else
;;;246        {
;;;247          CANx->MCR &= ~MCR_RFLM;
0000ce  6814              LDR      r4,[r2,#0]
0000d0  f0240408          BIC      r4,r4,#8
0000d4  6014              STR      r4,[r2,#0]
                  |L1.214|
;;;248        }
;;;249        /* Set the transmit FIFO priority */
;;;250        if (CAN_InitStruct->CAN_TXFP == ENABLE)
0000d6  794c              LDRB     r4,[r1,#5]
0000d8  2c01              CMP      r4,#1
0000da  d104              BNE      |L1.230|
;;;251        {
;;;252          CANx->MCR |= MCR_TXFP;
0000dc  6814              LDR      r4,[r2,#0]
0000de  f0440404          ORR      r4,r4,#4
0000e2  6014              STR      r4,[r2,#0]
0000e4  e003              B        |L1.238|
                  |L1.230|
;;;253        }
;;;254        else
;;;255        {
;;;256          CANx->MCR &= ~MCR_TXFP;
0000e6  6814              LDR      r4,[r2,#0]
0000e8  f0240404          BIC      r4,r4,#4
0000ec  6014              STR      r4,[r2,#0]
                  |L1.238|
;;;257        }
;;;258        /* Set the bit timing register */
;;;259        CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | ((uint32_t)CAN_InitStruct->CAN_SJW << 24) |
0000ee  798c              LDRB     r4,[r1,#6]
0000f0  07a4              LSLS     r4,r4,#30
0000f2  79cd              LDRB     r5,[r1,#7]
0000f4  ea446405          ORR      r4,r4,r5,LSL #24
0000f8  7a0d              LDRB     r5,[r1,#8]
0000fa  ea444405          ORR      r4,r4,r5,LSL #16
0000fe  7a4d              LDRB     r5,[r1,#9]
000100  ea445405          ORR      r4,r4,r5,LSL #20
000104  894d              LDRH     r5,[r1,#0xa]
000106  1e6d              SUBS     r5,r5,#1
000108  432c              ORRS     r4,r4,r5
00010a  61d4              STR      r4,[r2,#0x1c]
;;;260                   ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) |
;;;261                   ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
;;;262        /* Request leave initialisation */
;;;263        CANx->MCR &= ~MCR_INRQ;
00010c  6814              LDR      r4,[r2,#0]
00010e  f0240401          BIC      r4,r4,#1
000112  6014              STR      r4,[r2,#0]
;;;264       /* Wait the acknowledge */
;;;265       wait_ack = 0x00;
000114  2300              MOVS     r3,#0
;;;266       while ((wait_ack != INAK_TimeOut)&&((CANx->MSR & MSR_INAK) == MSR_INAK))
000116  e000              B        |L1.282|
                  |L1.280|
;;;267       {
;;;268         wait_ack++;
000118  1c5b              ADDS     r3,r3,#1
                  |L1.282|
00011a  f64f74ff          MOV      r4,#0xffff            ;266
00011e  42a3              CMP      r3,r4                 ;266
000120  d004              BEQ      |L1.300|
000122  6854              LDR      r4,[r2,#4]            ;266
000124  f0040401          AND      r4,r4,#1              ;266
000128  2c00              CMP      r4,#0                 ;266
00012a  d1f5              BNE      |L1.280|
                  |L1.300|
;;;269       }
;;;270        /* ...and check acknowledged */
;;;271        if ((CANx->MSR & MSR_INAK) == MSR_INAK)
00012c  6854              LDR      r4,[r2,#4]
00012e  f0040401          AND      r4,r4,#1
000132  b10c              CBZ      r4,|L1.312|
;;;272        {
;;;273          InitStatus = CANINITFAILED;
000134  2000              MOVS     r0,#0
000136  e000              B        |L1.314|
                  |L1.312|
;;;274        }
;;;275        else
;;;276        {
;;;277          InitStatus = CANINITOK ;
000138  2001              MOVS     r0,#1
                  |L1.314|
;;;278        }
;;;279      }
;;;280      /* At this step, return the status of initialization */
;;;281      return InitStatus;
;;;282    }
00013a  bd30              POP      {r4,r5,pc}
;;;283    
                          ENDP

                  CAN_FilterInit PROC
;;;290      */
;;;291    void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
00013c  b510              PUSH     {r4,lr}
;;;292    {
;;;293      uint32_t filter_number_bit_pos = 0;
00013e  2100              MOVS     r1,#0
;;;294      /* Check the parameters */
;;;295      assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
;;;296      assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
;;;297      assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
;;;298      assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
;;;299      assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
;;;300      filter_number_bit_pos = 
000140  7803              LDRB     r3,[r0,#0]
000142  2201              MOVS     r2,#1
000144  fa02f103          LSL      r1,r2,r3
;;;301      (uint32_t)(((uint32_t)0x00000001) << ((uint32_t)CAN_FilterInitStruct->CAN_FilterNumber));
;;;302      /* Initialisation mode for the filter */
;;;303      CAN1->FMR |= FMR_FINIT;
000148  4aae              LDR      r2,|L1.1028|
00014a  6812              LDR      r2,[r2,#0]
00014c  f0420201          ORR      r2,r2,#1
000150  4bac              LDR      r3,|L1.1028|
000152  601a              STR      r2,[r3,#0]
;;;304      /* Filter Deactivation */
;;;305      CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
000154  4aab              LDR      r2,|L1.1028|
000156  321c              ADDS     r2,r2,#0x1c
000158  6812              LDR      r2,[r2,#0]
00015a  438a              BICS     r2,r2,r1
00015c  4ba9              LDR      r3,|L1.1028|
00015e  331c              ADDS     r3,r3,#0x1c
000160  601a              STR      r2,[r3,#0]
;;;306      /* Filter Scale */
;;;307      if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
000162  7882              LDRB     r2,[r0,#2]
000164  b9ca              CBNZ     r2,|L1.410|
;;;308      {
;;;309        /* 16-bit scale for the filter */
;;;310        CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
000166  4aa7              LDR      r2,|L1.1028|
000168  320c              ADDS     r2,r2,#0xc
00016a  6812              LDR      r2,[r2,#0]
00016c  438a              BICS     r2,r2,r1
00016e  4ba5              LDR      r3,|L1.1028|
000170  330c              ADDS     r3,r3,#0xc
000172  601a              STR      r2,[r3,#0]
;;;311        /* First 16-bit identifier and First 16-bit mask */
;;;312        /* Or First 16-bit identifier and Second 16-bit identifier */
;;;313        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
000174  88c2              LDRH     r2,[r0,#6]
000176  8943              LDRH     r3,[r0,#0xa]
000178  ea424303          ORR      r3,r2,r3,LSL #16
00017c  4aa1              LDR      r2,|L1.1028|
00017e  3240              ADDS     r2,r2,#0x40
000180  7804              LDRB     r4,[r0,#0]
000182  f8423034          STR      r3,[r2,r4,LSL #3]
;;;314        ((uint32_t)((uint32_t)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
;;;315            ((uint32_t)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdLow);
;;;316        /* Second 16-bit identifier and Second 16-bit mask */
;;;317        /* Or Third 16-bit identifier and Fourth 16-bit identifier */
;;;318        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
000186  8882              LDRH     r2,[r0,#4]
000188  8903              LDRH     r3,[r0,#8]
00018a  ea424303          ORR      r3,r2,r3,LSL #16
00018e  4a9d              LDR      r2,|L1.1028|
000190  3240              ADDS     r2,r2,#0x40
000192  7804              LDRB     r4,[r0,#0]
000194  eb0202c4          ADD      r2,r2,r4,LSL #3
000198  6053              STR      r3,[r2,#4]
                  |L1.410|
;;;319        ((uint32_t)((uint32_t)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
;;;320            ((uint32_t)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdHigh);
;;;321      }
;;;322      if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
00019a  7882              LDRB     r2,[r0,#2]
00019c  2a01              CMP      r2,#1
00019e  d119              BNE      |L1.468|
;;;323      {
;;;324        /* 32-bit scale for the filter */
;;;325        CAN1->FS1R |= filter_number_bit_pos;
0001a0  4a98              LDR      r2,|L1.1028|
0001a2  320c              ADDS     r2,r2,#0xc
0001a4  6812              LDR      r2,[r2,#0]
0001a6  430a              ORRS     r2,r2,r1
0001a8  4b96              LDR      r3,|L1.1028|
0001aa  330c              ADDS     r3,r3,#0xc
0001ac  601a              STR      r2,[r3,#0]
;;;326        /* 32-bit identifier or First 32-bit identifier */
;;;327        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
0001ae  88c2              LDRH     r2,[r0,#6]
0001b0  8883              LDRH     r3,[r0,#4]
0001b2  ea424303          ORR      r3,r2,r3,LSL #16
0001b6  4a93              LDR      r2,|L1.1028|
0001b8  3240              ADDS     r2,r2,#0x40
0001ba  7804              LDRB     r4,[r0,#0]
0001bc  f8423034          STR      r3,[r2,r4,LSL #3]
;;;328        ((uint32_t)((uint32_t)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
;;;329            ((uint32_t)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdLow);
;;;330        /* 32-bit mask or Second 32-bit identifier */
;;;331        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
0001c0  8942              LDRH     r2,[r0,#0xa]
0001c2  8903              LDRH     r3,[r0,#8]
0001c4  ea424303          ORR      r3,r2,r3,LSL #16
0001c8  4a8e              LDR      r2,|L1.1028|
0001ca  3240              ADDS     r2,r2,#0x40
0001cc  7804              LDRB     r4,[r0,#0]
0001ce  eb0202c4          ADD      r2,r2,r4,LSL #3
0001d2  6053              STR      r3,[r2,#4]
                  |L1.468|
;;;332        ((uint32_t)((uint32_t)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
;;;333            ((uint32_t)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterMaskIdLow);
;;;334      }
;;;335      /* Filter Mode */
;;;336      if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
0001d4  7842              LDRB     r2,[r0,#1]
0001d6  b93a              CBNZ     r2,|L1.488|
;;;337      {
;;;338        /*Id/Mask mode for the filter*/
;;;339        CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
0001d8  4a8a              LDR      r2,|L1.1028|
0001da  1d12              ADDS     r2,r2,#4
0001dc  6812              LDR      r2,[r2,#0]
0001de  438a              BICS     r2,r2,r1
0001e0  4b88              LDR      r3,|L1.1028|
0001e2  1d1b              ADDS     r3,r3,#4
0001e4  601a              STR      r2,[r3,#0]
0001e6  e006              B        |L1.502|
                  |L1.488|
;;;340      }
;;;341      else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
;;;342      {
;;;343        /*Identifier list mode for the filter*/
;;;344        CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
0001e8  4a86              LDR      r2,|L1.1028|
0001ea  1d12              ADDS     r2,r2,#4
0001ec  6812              LDR      r2,[r2,#0]
0001ee  430a              ORRS     r2,r2,r1
0001f0  4b84              LDR      r3,|L1.1028|
0001f2  1d1b              ADDS     r3,r3,#4
0001f4  601a              STR      r2,[r3,#0]
                  |L1.502|
;;;345      }
;;;346      /* Filter FIFO assignment */
;;;347      if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_FilterFIFO0)
0001f6  8982              LDRH     r2,[r0,#0xc]
0001f8  b932              CBNZ     r2,|L1.520|
;;;348      {
;;;349        /* FIFO 0 assignation for the filter */
;;;350        CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
0001fa  4a82              LDR      r2,|L1.1028|
0001fc  3214              ADDS     r2,r2,#0x14
0001fe  6812              LDR      r2,[r2,#0]
000200  438a              BICS     r2,r2,r1
000202  4b80              LDR      r3,|L1.1028|
000204  3314              ADDS     r3,r3,#0x14
000206  601a              STR      r2,[r3,#0]
                  |L1.520|
;;;351      }
;;;352      if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_FilterFIFO1)
000208  8982              LDRH     r2,[r0,#0xc]
00020a  2a01              CMP      r2,#1
00020c  d106              BNE      |L1.540|
;;;353      {
;;;354        /* FIFO 1 assignation for the filter */
;;;355        CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
00020e  4a7d              LDR      r2,|L1.1028|
000210  3214              ADDS     r2,r2,#0x14
000212  6812              LDR      r2,[r2,#0]
000214  430a              ORRS     r2,r2,r1
000216  4b7b              LDR      r3,|L1.1028|
000218  3314              ADDS     r3,r3,#0x14
00021a  601a              STR      r2,[r3,#0]
                  |L1.540|
;;;356      }
;;;357      
;;;358      /* Filter activation */
;;;359      if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
00021c  7b82              LDRB     r2,[r0,#0xe]
00021e  2a01              CMP      r2,#1
000220  d106              BNE      |L1.560|
;;;360      {
;;;361        CAN1->FA1R |= filter_number_bit_pos;
000222  4a78              LDR      r2,|L1.1028|
000224  321c              ADDS     r2,r2,#0x1c
000226  6812              LDR      r2,[r2,#0]
000228  430a              ORRS     r2,r2,r1
00022a  4b76              LDR      r3,|L1.1028|
00022c  331c              ADDS     r3,r3,#0x1c
00022e  601a              STR      r2,[r3,#0]
                  |L1.560|
;;;362      }
;;;363      /* Leave the initialisation mode for the filter */
;;;364      CAN1->FMR &= ~FMR_FINIT;
000230  4a74              LDR      r2,|L1.1028|
000232  6812              LDR      r2,[r2,#0]
000234  f0220201          BIC      r2,r2,#1
000238  4b72              LDR      r3,|L1.1028|
00023a  601a              STR      r2,[r3,#0]
;;;365    }
00023c  bd10              POP      {r4,pc}
;;;366    
                          ENDP

                  CAN_StructInit PROC
;;;372      */
;;;373    void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
00023e  2100              MOVS     r1,#0
;;;374    {
;;;375      /* Reset CAN init structure parameters values */
;;;376      /* Initialize the time triggered communication mode */
;;;377      CAN_InitStruct->CAN_TTCM = DISABLE;
000240  7001              STRB     r1,[r0,#0]
;;;378      /* Initialize the automatic bus-off management */
;;;379      CAN_InitStruct->CAN_ABOM = DISABLE;
000242  7041              STRB     r1,[r0,#1]
;;;380      /* Initialize the automatic wake-up mode */
;;;381      CAN_InitStruct->CAN_AWUM = DISABLE;
000244  7081              STRB     r1,[r0,#2]
;;;382      /* Initialize the no automatic retransmission */
;;;383      CAN_InitStruct->CAN_NART = DISABLE;
000246  70c1              STRB     r1,[r0,#3]
;;;384      /* Initialize the receive FIFO locked mode */
;;;385      CAN_InitStruct->CAN_RFLM = DISABLE;
000248  7101              STRB     r1,[r0,#4]
;;;386      /* Initialize the transmit FIFO priority */
;;;387      CAN_InitStruct->CAN_TXFP = DISABLE;
00024a  7141              STRB     r1,[r0,#5]
;;;388      /* Initialize the CAN_Mode member */
;;;389      CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
00024c  7181              STRB     r1,[r0,#6]
;;;390      /* Initialize the CAN_SJW member */
;;;391      CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
00024e  71c1              STRB     r1,[r0,#7]
;;;392      /* Initialize the CAN_BS1 member */
;;;393      CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
000250  2103              MOVS     r1,#3
000252  7201              STRB     r1,[r0,#8]
;;;394      /* Initialize the CAN_BS2 member */
;;;395      CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
000254  2102              MOVS     r1,#2
000256  7241              STRB     r1,[r0,#9]
;;;396      /* Initialize the CAN_Prescaler member */
;;;397      CAN_InitStruct->CAN_Prescaler = 1;
000258  2101              MOVS     r1,#1
00025a  8141              STRH     r1,[r0,#0xa]
;;;398    }
00025c  4770              BX       lr
;;;399    
                          ENDP

                  CAN_ITConfig PROC
;;;413      */
;;;414    void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState Newstate)
00025e  b11a              CBZ      r2,|L1.616|
;;;415    {
;;;416      /* Check the parameters */
;;;417      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;418      assert_param(IS_CAN_ITConfig(CAN_IT));
;;;419      assert_param(IS_FUNCTIONAL_STATE(Newstate));
;;;420      if (Newstate != DISABLE)
;;;421      {
;;;422        /* Enable the selected CAN interrupt */
;;;423        CANx->IER |= CAN_IT;
000260  6943              LDR      r3,[r0,#0x14]
000262  430b              ORRS     r3,r3,r1
000264  6143              STR      r3,[r0,#0x14]
000266  e002              B        |L1.622|
                  |L1.616|
;;;424      }
;;;425      else
;;;426      {
;;;427        /* Disable the selected CAN interrupt */
;;;428        CANx->IER &= ~CAN_IT;
000268  6943              LDR      r3,[r0,#0x14]
00026a  438b              BICS     r3,r3,r1
00026c  6143              STR      r3,[r0,#0x14]
                  |L1.622|
;;;429      }
;;;430    }
00026e  4770              BX       lr
;;;431    
                          ENDP

                  CAN_Transmit PROC
;;;439      */
;;;440    uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
000270  b510              PUSH     {r4,lr}
;;;441    {
000272  4602              MOV      r2,r0
;;;442      uint8_t transmit_mailbox = 0;
000274  2000              MOVS     r0,#0
;;;443      /* Check the parameters */
;;;444      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;445      assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
;;;446      assert_param(IS_CAN_RTR(TxMessage->RTR));
;;;447      assert_param(IS_CAN_DLC(TxMessage->DLC));
;;;448      /* Select one empty transmit mailbox */
;;;449      if ((CANx->TSR&TSR_TME0) == TSR_TME0)
000276  6893              LDR      r3,[r2,#8]
000278  f0036380          AND      r3,r3,#0x4000000
00027c  f1b36f80          CMP      r3,#0x4000000
000280  d100              BNE      |L1.644|
;;;450      {
;;;451        transmit_mailbox = 0;
000282  e010              B        |L1.678|
                  |L1.644|
;;;452      }
;;;453      else if ((CANx->TSR&TSR_TME1) == TSR_TME1)
000284  6893              LDR      r3,[r2,#8]
000286  f0036300          AND      r3,r3,#0x8000000
00028a  f1b36f00          CMP      r3,#0x8000000
00028e  d101              BNE      |L1.660|
;;;454      {
;;;455        transmit_mailbox = 1;
000290  2001              MOVS     r0,#1
000292  e008              B        |L1.678|
                  |L1.660|
;;;456      }
;;;457      else if ((CANx->TSR&TSR_TME2) == TSR_TME2)
000294  6893              LDR      r3,[r2,#8]
000296  f0035380          AND      r3,r3,#0x10000000
00029a  f1b35f80          CMP      r3,#0x10000000
00029e  d101              BNE      |L1.676|
;;;458      {
;;;459        transmit_mailbox = 2;
0002a0  2002              MOVS     r0,#2
0002a2  e000              B        |L1.678|
                  |L1.676|
;;;460      }
;;;461      else
;;;462      {
;;;463        transmit_mailbox = CAN_NO_MB;
0002a4  2004              MOVS     r0,#4
                  |L1.678|
;;;464      }
;;;465      if (transmit_mailbox != CAN_NO_MB)
0002a6  2804              CMP      r0,#4
0002a8  d074              BEQ      |L1.916|
;;;466      {
;;;467        /* Set up the Id */
;;;468        CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
0002aa  f50273c0          ADD      r3,r2,#0x180
0002ae  eb031300          ADD      r3,r3,r0,LSL #4
0002b2  681b              LDR      r3,[r3,#0]
0002b4  f0030401          AND      r4,r3,#1
0002b8  f50273c0          ADD      r3,r2,#0x180
0002bc  eb031300          ADD      r3,r3,r0,LSL #4
0002c0  601c              STR      r4,[r3,#0]
;;;469        if (TxMessage->IDE == CAN_ID_STD)
0002c2  7a0b              LDRB     r3,[r1,#8]
0002c4  b97b              CBNZ     r3,|L1.742|
;;;470        {
;;;471          assert_param(IS_CAN_STDID(TxMessage->StdId));  
;;;472          CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | TxMessage->RTR);
0002c6  7a4b              LDRB     r3,[r1,#9]
0002c8  880c              LDRH     r4,[r1,#0]
0002ca  ea435344          ORR      r3,r3,r4,LSL #21
0002ce  f50274c0          ADD      r4,r2,#0x180
0002d2  eb041400          ADD      r4,r4,r0,LSL #4
0002d6  6824              LDR      r4,[r4,#0]
0002d8  4323              ORRS     r3,r3,r4
0002da  f50274c0          ADD      r4,r2,#0x180
0002de  eb041400          ADD      r4,r4,r0,LSL #4
0002e2  6023              STR      r3,[r4,#0]
0002e4  e010              B        |L1.776|
                  |L1.742|
;;;473        }
;;;474        else
;;;475        {
;;;476          assert_param(IS_CAN_EXTID(TxMessage->ExtId));
;;;477          CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId<<3) | TxMessage->IDE | 
0002e6  7a0b              LDRB     r3,[r1,#8]
0002e8  684c              LDR      r4,[r1,#4]
0002ea  ea4303c4          ORR      r3,r3,r4,LSL #3
0002ee  7a4c              LDRB     r4,[r1,#9]
0002f0  4323              ORRS     r3,r3,r4
0002f2  f50274c0          ADD      r4,r2,#0x180
0002f6  eb041400          ADD      r4,r4,r0,LSL #4
0002fa  6824              LDR      r4,[r4,#0]
0002fc  4323              ORRS     r3,r3,r4
0002fe  f50274c0          ADD      r4,r2,#0x180
000302  eb041400          ADD      r4,r4,r0,LSL #4
000306  6023              STR      r3,[r4,#0]
                  |L1.776|
;;;478                                                   TxMessage->RTR);
;;;479        }
;;;480        
;;;481        /* Set up the DLC */
;;;482        TxMessage->DLC &= (uint8_t)0x0000000F;
000308  7a8b              LDRB     r3,[r1,#0xa]
00030a  f003030f          AND      r3,r3,#0xf
00030e  728b              STRB     r3,[r1,#0xa]
;;;483        CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
000310  f50273c0          ADD      r3,r2,#0x180
000314  eb031300          ADD      r3,r3,r0,LSL #4
000318  685b              LDR      r3,[r3,#4]
00031a  f023040f          BIC      r4,r3,#0xf
00031e  f50273c0          ADD      r3,r2,#0x180
000322  eb031300          ADD      r3,r3,r0,LSL #4
000326  605c              STR      r4,[r3,#4]
;;;484        CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
000328  f50273c0          ADD      r3,r2,#0x180
00032c  eb031300          ADD      r3,r3,r0,LSL #4
000330  685b              LDR      r3,[r3,#4]
000332  7a8c              LDRB     r4,[r1,#0xa]
000334  4323              ORRS     r3,r3,r4
000336  f50274c0          ADD      r4,r2,#0x180
00033a  eb041400          ADD      r4,r4,r0,LSL #4
00033e  6063              STR      r3,[r4,#4]
;;;485        /* Set up the data field */
;;;486        CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
000340  7b8b              LDRB     r3,[r1,#0xe]
000342  061c              LSLS     r4,r3,#24
000344  7b4b              LDRB     r3,[r1,#0xd]
000346  ea444403          ORR      r4,r4,r3,LSL #16
00034a  7b0b              LDRB     r3,[r1,#0xc]
00034c  ea442303          ORR      r3,r4,r3,LSL #8
000350  7acc              LDRB     r4,[r1,#0xb]
000352  4323              ORRS     r3,r3,r4
000354  f50274c0          ADD      r4,r2,#0x180
000358  eb041400          ADD      r4,r4,r0,LSL #4
00035c  60a3              STR      r3,[r4,#8]
;;;487                                                 ((uint32_t)TxMessage->Data[2] << 16) |
;;;488                                                 ((uint32_t)TxMessage->Data[1] << 8) | 
;;;489                                                 ((uint32_t)TxMessage->Data[0]));
;;;490        CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
00035e  7c8b              LDRB     r3,[r1,#0x12]
000360  061c              LSLS     r4,r3,#24
000362  7c4b              LDRB     r3,[r1,#0x11]
000364  ea444403          ORR      r4,r4,r3,LSL #16
000368  7c0b              LDRB     r3,[r1,#0x10]
00036a  ea442303          ORR      r3,r4,r3,LSL #8
00036e  7bcc              LDRB     r4,[r1,#0xf]
000370  4323              ORRS     r3,r3,r4
000372  f50274c0          ADD      r4,r2,#0x180
000376  eb041400          ADD      r4,r4,r0,LSL #4
00037a  60e3              STR      r3,[r4,#0xc]
;;;491                                                 ((uint32_t)TxMessage->Data[6] << 16) |
;;;492                                                 ((uint32_t)TxMessage->Data[5] << 8) |
;;;493                                                 ((uint32_t)TxMessage->Data[4]));
;;;494        /* Request transmission */
;;;495        CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
00037c  f50273c0          ADD      r3,r2,#0x180
000380  eb031300          ADD      r3,r3,r0,LSL #4
000384  681b              LDR      r3,[r3,#0]
000386  f0430401          ORR      r4,r3,#1
00038a  f50273c0          ADD      r3,r2,#0x180
00038e  eb031300          ADD      r3,r3,r0,LSL #4
000392  601c              STR      r4,[r3,#0]
                  |L1.916|
;;;496      }
;;;497      return transmit_mailbox;
;;;498    }
000394  bd10              POP      {r4,pc}
;;;499    
                          ENDP

                  CAN_TransmitStatus PROC
;;;507      */
;;;508    uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t transmit_mailbox)
000396  4602              MOV      r2,r0
;;;509    {
;;;510      /* RQCP, TXOK and TME bits */
;;;511      uint8_t state = 0;
000398  2000              MOVS     r0,#0
;;;512      /* Check the parameters */
;;;513      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;514      assert_param(IS_CAN_TRANSMITMAILBOX(transmit_mailbox));
;;;515      switch (transmit_mailbox)
00039a  b121              CBZ      r1,|L1.934|
00039c  2901              CMP      r1,#1
00039e  d010              BEQ      |L1.962|
0003a0  2902              CMP      r1,#2
0003a2  d131              BNE      |L1.1032|
0003a4  e01c              B        |L1.992|
                  |L1.934|
;;;516      {
;;;517        case (0): state |= (uint8_t)((CANx->TSR & TSR_RQCP0) << 2);
0003a6  6893              LDR      r3,[r2,#8]
0003a8  f0030301          AND      r3,r3,#1
0003ac  ea400083          ORR      r0,r0,r3,LSL #2
;;;518          state |= (uint8_t)((CANx->TSR & TSR_TXOK0) >> 0);
0003b0  6893              LDR      r3,[r2,#8]
0003b2  f0030302          AND      r3,r3,#2
0003b6  4318              ORRS     r0,r0,r3
;;;519          state |= (uint8_t)((CANx->TSR & TSR_TME0) >> 26);
0003b8  6893              LDR      r3,[r2,#8]
0003ba  f3c36380          UBFX     r3,r3,#26,#1
0003be  4318              ORRS     r0,r0,r3
;;;520          break;
0003c0  e024              B        |L1.1036|
                  |L1.962|
;;;521        case (1): state |= (uint8_t)((CANx->TSR & TSR_RQCP1) >> 6);
0003c2  6893              LDR      r3,[r2,#8]
0003c4  f4037380          AND      r3,r3,#0x100
0003c8  ea401093          ORR      r0,r0,r3,LSR #6
;;;522          state |= (uint8_t)((CANx->TSR & TSR_TXOK1) >> 8);
0003cc  6893              LDR      r3,[r2,#8]
0003ce  f4037300          AND      r3,r3,#0x200
0003d2  ea402013          ORR      r0,r0,r3,LSR #8
;;;523          state |= (uint8_t)((CANx->TSR & TSR_TME1) >> 27);
0003d6  6893              LDR      r3,[r2,#8]
0003d8  f3c363c0          UBFX     r3,r3,#27,#1
0003dc  4318              ORRS     r0,r0,r3
;;;524          break;
0003de  e015              B        |L1.1036|
                  |L1.992|
;;;525        case (2): state |= (uint8_t)((CANx->TSR & TSR_RQCP2) >> 14);
0003e0  6893              LDR      r3,[r2,#8]
0003e2  f4033380          AND      r3,r3,#0x10000
0003e6  ea403093          ORR      r0,r0,r3,LSR #14
;;;526          state |= (uint8_t)((CANx->TSR & TSR_TXOK2) >> 16);
0003ea  6893              LDR      r3,[r2,#8]
0003ec  f4033300          AND      r3,r3,#0x20000
0003f0  ea404013          ORR      r0,r0,r3,LSR #16
;;;527          state |= (uint8_t)((CANx->TSR & TSR_TME2) >> 28);
0003f4  6893              LDR      r3,[r2,#8]
0003f6  f3c37300          UBFX     r3,r3,#28,#1
0003fa  4318              ORRS     r0,r0,r3
;;;528          break;
0003fc  e006              B        |L1.1036|
0003fe  0000              DCW      0x0000
                  |L1.1024|
                          DCD      0xbfff9c00
                  |L1.1028|
                          DCD      0x40006600
                  |L1.1032|
;;;529        default:
;;;530          state = CANTXFAILED;
000408  2000              MOVS     r0,#0
;;;531          break;
00040a  bf00              NOP      
                  |L1.1036|
00040c  bf00              NOP                            ;520
;;;532      }
;;;533      switch (state)
00040e  b120              CBZ      r0,|L1.1050|
000410  2805              CMP      r0,#5
000412  d004              BEQ      |L1.1054|
000414  2807              CMP      r0,#7
000416  d106              BNE      |L1.1062|
000418  e003              B        |L1.1058|
                  |L1.1050|
;;;534      {
;;;535          /* transmit pending  */
;;;536        case (0x0): state = CANTXPENDING;
00041a  2002              MOVS     r0,#2
;;;537          break;
00041c  e005              B        |L1.1066|
                  |L1.1054|
;;;538          /* transmit failed  */
;;;539        case (0x5): state = CANTXFAILED;
00041e  2000              MOVS     r0,#0
;;;540          break;
000420  e003              B        |L1.1066|
                  |L1.1058|
;;;541          /* transmit succedeed  */
;;;542        case (0x7): state = CANTXOK;
000422  2001              MOVS     r0,#1
;;;543          break;
000424  e001              B        |L1.1066|
                  |L1.1062|
;;;544        default:
;;;545          state = CANTXFAILED;
000426  2000              MOVS     r0,#0
;;;546          break;
000428  bf00              NOP      
                  |L1.1066|
00042a  bf00              NOP                            ;537
;;;547      }
;;;548      return state;
;;;549    }
00042c  4770              BX       lr
;;;550    
                          ENDP

                  CAN_CancelTransmit PROC
;;;556      */
;;;557    void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
00042e  b121              CBZ      r1,|L1.1082|
;;;558    {
;;;559      /* Check the parameters */
;;;560      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;561      assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
;;;562      /* abort transmission */
;;;563      switch (Mailbox)
000430  2901              CMP      r1,#1
000432  d007              BEQ      |L1.1092|
000434  2902              CMP      r1,#2
000436  d10f              BNE      |L1.1112|
000438  e009              B        |L1.1102|
                  |L1.1082|
;;;564      {
;;;565        case (0): CANx->TSR |= TSR_ABRQ0;
00043a  6882              LDR      r2,[r0,#8]
00043c  f0420280          ORR      r2,r2,#0x80
000440  6082              STR      r2,[r0,#8]
;;;566          break;
000442  e00a              B        |L1.1114|
                  |L1.1092|
;;;567        case (1): CANx->TSR |= TSR_ABRQ1;
000444  6882              LDR      r2,[r0,#8]
000446  f4424200          ORR      r2,r2,#0x8000
00044a  6082              STR      r2,[r0,#8]
;;;568          break;
00044c  e005              B        |L1.1114|
                  |L1.1102|
;;;569        case (2): CANx->TSR |= TSR_ABRQ2;
00044e  6882              LDR      r2,[r0,#8]
000450  f4420200          ORR      r2,r2,#0x800000
000454  6082              STR      r2,[r0,#8]
;;;570          break;
000456  e000              B        |L1.1114|
                  |L1.1112|
;;;571        default:
;;;572          break;
000458  bf00              NOP      
                  |L1.1114|
00045a  bf00              NOP                            ;566
;;;573      }
;;;574    }
00045c  4770              BX       lr
;;;575    
                          ENDP

                  CAN_FIFORelease PROC
;;;581      */
;;;582    void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
00045e  b911              CBNZ     r1,|L1.1126|
;;;583    {
;;;584      /* Check the parameters */
;;;585      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;586      assert_param(IS_CAN_FIFO(FIFONumber));
;;;587      /* Release FIFO0 */
;;;588      if (FIFONumber == CAN_FIFO0)
;;;589      {
;;;590        CANx->RF0R = RF0R_RFOM0;
000460  2220              MOVS     r2,#0x20
000462  60c2              STR      r2,[r0,#0xc]
000464  e001              B        |L1.1130|
                  |L1.1126|
;;;591      }
;;;592      /* Release FIFO1 */
;;;593      else /* FIFONumber == CAN_FIFO1 */
;;;594      {
;;;595        CANx->RF1R = RF1R_RFOM1;
000466  2220              MOVS     r2,#0x20
000468  6102              STR      r2,[r0,#0x10]
                  |L1.1130|
;;;596      }
;;;597    }
00046a  4770              BX       lr
;;;598    
                          ENDP

                  CAN_MessagePending PROC
;;;604      */
;;;605    uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
00046c  4602              MOV      r2,r0
;;;606    {
;;;607      uint8_t message_pending=0;
00046e  2000              MOVS     r0,#0
;;;608      /* Check the parameters */
;;;609      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;610      assert_param(IS_CAN_FIFO(FIFONumber));
;;;611      if (FIFONumber == CAN_FIFO0)
000470  b919              CBNZ     r1,|L1.1146|
;;;612      {
;;;613        message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
000472  68d3              LDR      r3,[r2,#0xc]
000474  f0030003          AND      r0,r3,#3
000478  e006              B        |L1.1160|
                  |L1.1146|
;;;614      }
;;;615      else if (FIFONumber == CAN_FIFO1)
00047a  2901              CMP      r1,#1
00047c  d103              BNE      |L1.1158|
;;;616      {
;;;617        message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
00047e  6913              LDR      r3,[r2,#0x10]
000480  f0030003          AND      r0,r3,#3
000484  e000              B        |L1.1160|
                  |L1.1158|
;;;618      }
;;;619      else
;;;620      {
;;;621        message_pending = 0;
000486  2000              MOVS     r0,#0
                  |L1.1160|
;;;622      }
;;;623      return message_pending;
;;;624    }
000488  4770              BX       lr
;;;625    
                          ENDP

                  CAN_Receive PROC
;;;633      */
;;;634    void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
00048a  b530              PUSH     {r4,r5,lr}
;;;635    {
00048c  4605              MOV      r5,r0
00048e  460c              MOV      r4,r1
000490  4613              MOV      r3,r2
;;;636      /* Check the parameters */
;;;637      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;638      assert_param(IS_CAN_FIFO(FIFONumber));
;;;639      /* Get the Id */
;;;640      RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
000492  f50570d8          ADD      r0,r5,#0x1b0
000496  eb001004          ADD      r0,r0,r4,LSL #4
00049a  6800              LDR      r0,[r0,#0]
00049c  f0000004          AND      r0,r0,#4
0004a0  7218              STRB     r0,[r3,#8]
;;;641      if (RxMessage->IDE == CAN_ID_STD)
0004a2  7a18              LDRB     r0,[r3,#8]
0004a4  b950              CBNZ     r0,|L1.1212|
;;;642      {
;;;643        RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
0004a6  f50570d8          ADD      r0,r5,#0x1b0
0004aa  eb001004          ADD      r0,r0,r4,LSL #4
0004ae  6800              LDR      r0,[r0,#0]
0004b0  f24071ff          MOV      r1,#0x7ff
0004b4  ea015050          AND      r0,r1,r0,LSR #21
0004b8  6018              STR      r0,[r3,#0]
0004ba  e009              B        |L1.1232|
                  |L1.1212|
;;;644      }
;;;645      else
;;;646      {
;;;647        RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
0004bc  f50570d8          ADD      r0,r5,#0x1b0
0004c0  eb001004          ADD      r0,r0,r4,LSL #4
0004c4  6800              LDR      r0,[r0,#0]
0004c6  f06f4160          MVN      r1,#0xe0000000
0004ca  ea0100d0          AND      r0,r1,r0,LSR #3
0004ce  6058              STR      r0,[r3,#4]
                  |L1.1232|
;;;648      }
;;;649      
;;;650      RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
0004d0  f50570d8          ADD      r0,r5,#0x1b0
0004d4  eb001004          ADD      r0,r0,r4,LSL #4
0004d8  6800              LDR      r0,[r0,#0]
0004da  f0000002          AND      r0,r0,#2
0004de  7258              STRB     r0,[r3,#9]
;;;651      /* Get the DLC */
;;;652      RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
0004e0  f50570d8          ADD      r0,r5,#0x1b0
0004e4  eb001004          ADD      r0,r0,r4,LSL #4
0004e8  6840              LDR      r0,[r0,#4]
0004ea  f000000f          AND      r0,r0,#0xf
0004ee  7298              STRB     r0,[r3,#0xa]
;;;653      /* Get the FMI */
;;;654      RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
0004f0  f50570d8          ADD      r0,r5,#0x1b0
0004f4  eb001004          ADD      r0,r0,r4,LSL #4
0004f8  6840              LDR      r0,[r0,#4]
0004fa  0a00              LSRS     r0,r0,#8
0004fc  74d8              STRB     r0,[r3,#0x13]
;;;655      /* Get the data field */
;;;656      RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
0004fe  f50570d8          ADD      r0,r5,#0x1b0
000502  eb001004          ADD      r0,r0,r4,LSL #4
000506  6880              LDR      r0,[r0,#8]
000508  72d8              STRB     r0,[r3,#0xb]
;;;657      RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
00050a  f50570d8          ADD      r0,r5,#0x1b0
00050e  eb001004          ADD      r0,r0,r4,LSL #4
000512  6880              LDR      r0,[r0,#8]
000514  0a01              LSRS     r1,r0,#8
000516  7319              STRB     r1,[r3,#0xc]
;;;658      RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
000518  f50570d8          ADD      r0,r5,#0x1b0
00051c  eb001004          ADD      r0,r0,r4,LSL #4
000520  6880              LDR      r0,[r0,#8]
000522  0c01              LSRS     r1,r0,#16
000524  7359              STRB     r1,[r3,#0xd]
;;;659      RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
000526  f50570d8          ADD      r0,r5,#0x1b0
00052a  eb001004          ADD      r0,r0,r4,LSL #4
00052e  6880              LDR      r0,[r0,#8]
000530  0e00              LSRS     r0,r0,#24
000532  7398              STRB     r0,[r3,#0xe]
;;;660      RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
000534  f50570d8          ADD      r0,r5,#0x1b0
000538  eb001004          ADD      r0,r0,r4,LSL #4
00053c  68c0              LDR      r0,[r0,#0xc]
00053e  73d8              STRB     r0,[r3,#0xf]
;;;661      RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
000540  f50570d8          ADD      r0,r5,#0x1b0
000544  eb001004          ADD      r0,r0,r4,LSL #4
000548  68c0              LDR      r0,[r0,#0xc]
00054a  0a01              LSRS     r1,r0,#8
00054c  7419              STRB     r1,[r3,#0x10]
;;;662      RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
00054e  f50570d8          ADD      r0,r5,#0x1b0
000552  eb001004          ADD      r0,r0,r4,LSL #4
000556  68c0              LDR      r0,[r0,#0xc]
000558  0c01              LSRS     r1,r0,#16
00055a  7459              STRB     r1,[r3,#0x11]
;;;663      RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
00055c  f50570d8          ADD      r0,r5,#0x1b0
000560  eb001004          ADD      r0,r0,r4,LSL #4
000564  68c0              LDR      r0,[r0,#0xc]
000566  0e00              LSRS     r0,r0,#24
000568  7498              STRB     r0,[r3,#0x12]
;;;664      /* Release the FIFO */
;;;665      CAN_FIFORelease(CANx, FIFONumber);
00056a  4621              MOV      r1,r4
00056c  4628              MOV      r0,r5
00056e  f7fffffe          BL       CAN_FIFORelease
;;;666    }
000572  bd30              POP      {r4,r5,pc}
;;;667    
                          ENDP

                  CAN_DBGFreeze PROC
;;;674      */
;;;675    void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState Newstate)
000574  b121              CBZ      r1,|L1.1408|
;;;676    {
;;;677      /* Check the parameters */
;;;678      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;679      assert_param(IS_FUNCTIONAL_STATE(Newstate));
;;;680       if (Newstate != DISABLE)
;;;681      {
;;;682        /* Enable Debug Freeze  */
;;;683        CANx->MCR |= MCR_DBF;
000576  6802              LDR      r2,[r0,#0]
000578  f4423280          ORR      r2,r2,#0x10000
00057c  6002              STR      r2,[r0,#0]
00057e  e003              B        |L1.1416|
                  |L1.1408|
;;;684      }
;;;685      else
;;;686      {
;;;687        /* Disable Debug Freeze */
;;;688        CANx->MCR &= ~MCR_DBF;
000580  6802              LDR      r2,[r0,#0]
000582  f4223280          BIC      r2,r2,#0x10000
000586  6002              STR      r2,[r0,#0]
                  |L1.1416|
;;;689      }
;;;690    }
000588  4770              BX       lr
;;;691    
                          ENDP

                  CAN_Sleep PROC
;;;696      */
;;;697    uint8_t CAN_Sleep(CAN_TypeDef* CANx)
00058a  4601              MOV      r1,r0
;;;698    {
;;;699      uint8_t sleepstatus = CANSLEEPFAILED;
00058c  2000              MOVS     r0,#0
;;;700      
;;;701      /* Check the parameters */
;;;702      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;703        
;;;704      /* Request Sleep mode */
;;;705       CANx->MCR = (((CANx->MCR) & (uint32_t)(~MCR_INRQ)) | MCR_SLEEP);
00058e  680a              LDR      r2,[r1,#0]
000590  f0220201          BIC      r2,r2,#1
000594  f0420202          ORR      r2,r2,#2
000598  600a              STR      r2,[r1,#0]
;;;706       
;;;707      /* Sleep mode status */
;;;708      if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
00059a  684a              LDR      r2,[r1,#4]
00059c  f0020203          AND      r2,r2,#3
0005a0  2a02              CMP      r2,#2
0005a2  d100              BNE      |L1.1446|
;;;709      {
;;;710        /* Sleep mode not entered */
;;;711        sleepstatus =  CANSLEEPOK;
0005a4  2001              MOVS     r0,#1
                  |L1.1446|
;;;712      }
;;;713      /* At this step, sleep mode status */
;;;714       return (uint8_t)sleepstatus;
;;;715    }
0005a6  4770              BX       lr
;;;716    
                          ENDP

                  CAN_WakeUp PROC
;;;722      */
;;;723    uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
0005a8  4601              MOV      r1,r0
;;;724    {
;;;725      uint32_t wait_slak = SLAK_TimeOut	;
0005aa  f64f72ff          MOV      r2,#0xffff
;;;726      uint8_t wakeupstatus = CANWAKEUPFAILED;
0005ae  2000              MOVS     r0,#0
;;;727      
;;;728      /* Check the parameters */
;;;729      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;730        
;;;731      /* Wake up request */
;;;732      CANx->MCR &= ~MCR_SLEEP;
0005b0  680b              LDR      r3,[r1,#0]
0005b2  f0230302          BIC      r3,r3,#2
0005b6  600b              STR      r3,[r1,#0]
;;;733        
;;;734      /* Sleep mode status */
;;;735      while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
0005b8  e000              B        |L1.1468|
                  |L1.1466|
;;;736      {
;;;737       wait_slak--;
0005ba  1e52              SUBS     r2,r2,#1
                  |L1.1468|
0005bc  684b              LDR      r3,[r1,#4]            ;735
0005be  f0030302          AND      r3,r3,#2              ;735
0005c2  2b02              CMP      r3,#2                 ;735
0005c4  d101              BNE      |L1.1482|
0005c6  2a00              CMP      r2,#0                 ;735
0005c8  d1f7              BNE      |L1.1466|
                  |L1.1482|
;;;738      }
;;;739      if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
0005ca  684b              LDR      r3,[r1,#4]
0005cc  f0030302          AND      r3,r3,#2
0005d0  2b02              CMP      r3,#2
0005d2  d000              BEQ      |L1.1494|
;;;740      {
;;;741       /* Sleep mode exited */
;;;742        wakeupstatus = CANWAKEUPOK;
0005d4  2001              MOVS     r0,#1
                  |L1.1494|
;;;743      }
;;;744      /* At this step, sleep mode status */
;;;745      return (uint8_t)wakeupstatus;
;;;746    }
0005d6  4770              BX       lr
;;;747    
                          ENDP

                  CAN_GetFlagStatus PROC
;;;755      */
;;;756    FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
0005d8  4602              MOV      r2,r0
;;;757    {
;;;758      FlagStatus bitstatus = RESET;
0005da  2000              MOVS     r0,#0
;;;759      /* Check the parameters */
;;;760      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;761      assert_param(IS_CAN_FLAG(CAN_FLAG));
;;;762      /* Check the status of the specified CAN flag */
;;;763      if ((CANx->ESR & CAN_FLAG) != (uint32_t)RESET)
0005dc  6993              LDR      r3,[r2,#0x18]
0005de  400b              ANDS     r3,r3,r1
0005e0  b10b              CBZ      r3,|L1.1510|
;;;764      {
;;;765        /* CAN_FLAG is set */
;;;766        bitstatus = SET;
0005e2  2001              MOVS     r0,#1
0005e4  e000              B        |L1.1512|
                  |L1.1510|
;;;767      }
;;;768      else
;;;769      {
;;;770        /* CAN_FLAG is reset */
;;;771        bitstatus = RESET;
0005e6  2000              MOVS     r0,#0
                  |L1.1512|
;;;772      }
;;;773      /* Return the CAN_FLAG status */
;;;774      return  bitstatus;
;;;775    }
0005e8  4770              BX       lr
;;;776    
                          ENDP

                  CAN_ClearFlag PROC
;;;782      */
;;;783    void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
0005ea  6982              LDR      r2,[r0,#0x18]
;;;784    {
;;;785      /* Check the parameters */
;;;786      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;787      assert_param(IS_CAN_FLAG(CAN_FLAG));
;;;788      /* Clear the selected CAN flags */
;;;789      CANx->ESR &= ~CAN_FLAG;
0005ec  438a              BICS     r2,r2,r1
0005ee  6182              STR      r2,[r0,#0x18]
;;;790    }
0005f0  4770              BX       lr
;;;791    
                          ENDP

                  CheckITStatus PROC
;;;914      */
;;;915    static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
0005f2  4602              MOV      r2,r0
;;;916    {
;;;917      ITStatus pendingbitstatus = RESET;
0005f4  2000              MOVS     r0,#0
;;;918      
;;;919      if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
0005f6  ea020301          AND      r3,r2,r1
0005fa  b10b              CBZ      r3,|L1.1536|
;;;920      {
;;;921        /* CAN_IT is set */
;;;922        pendingbitstatus = SET;
0005fc  2001              MOVS     r0,#1
0005fe  e000              B        |L1.1538|
                  |L1.1536|
;;;923      }
;;;924      else
;;;925      {
;;;926        /* CAN_IT is reset */
;;;927        pendingbitstatus = RESET;
000600  2000              MOVS     r0,#0
                  |L1.1538|
;;;928      }
;;;929      return pendingbitstatus;
;;;930    }
000602  4770              BX       lr
;;;931    
                          ENDP

                  CAN_GetITStatus PROC
;;;802      */
;;;803    ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
000604  b570              PUSH     {r4-r6,lr}
;;;804    {
000606  4604              MOV      r4,r0
000608  460d              MOV      r5,r1
;;;805      ITStatus pendingbitstatus = RESET;
00060a  2600              MOVS     r6,#0
;;;806      /* Check the parameters */
;;;807      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;808      assert_param(IS_CAN_ITStatus(CAN_IT));
;;;809      switch (CAN_IT)
00060c  2d40              CMP      r5,#0x40
00060e  d047              BEQ      |L1.1696|
000610  dc0e              BGT      |L1.1584|
000612  2d07              CMP      r5,#7
000614  d02b              BEQ      |L1.1646|
000616  dc06              BGT      |L1.1574|
000618  2d04              CMP      r5,#4
00061a  d02f              BEQ      |L1.1660|
00061c  2d05              CMP      r5,#5
00061e  d019              BEQ      |L1.1620|
000620  2d06              CMP      r5,#6
000622  d161              BNE      |L1.1768|
000624  e01c              B        |L1.1632|
                  |L1.1574|
000626  2d08              CMP      r5,#8
000628  d02e              BEQ      |L1.1672|
00062a  2d20              CMP      r5,#0x20
00062c  d15c              BNE      |L1.1768|
00062e  e031              B        |L1.1684|
                  |L1.1584|
000630  f5b56f80          CMP      r5,#0x400
000634  d046              BEQ      |L1.1732|
000636  dc06              BGT      |L1.1606|
000638  f5b57f80          CMP      r5,#0x100
00063c  d036              BEQ      |L1.1708|
00063e  f5b57f00          CMP      r5,#0x200
000642  d151              BNE      |L1.1768|
000644  e038              B        |L1.1720|
                  |L1.1606|
000646  f5b53f80          CMP      r5,#0x10000
00064a  d047              BEQ      |L1.1756|
00064c  f5b53f00          CMP      r5,#0x20000
000650  d14a              BNE      |L1.1768|
000652  e03d              B        |L1.1744|
                  |L1.1620|
;;;810      {
;;;811        case CAN_IT_RQCP0:
;;;812          pendingbitstatus = CheckITStatus(CANx->TSR, TSR_RQCP0);
000654  68a0              LDR      r0,[r4,#8]
000656  2101              MOVS     r1,#1
000658  f7fffffe          BL       CheckITStatus
00065c  4606              MOV      r6,r0
;;;813          break;
00065e  e045              B        |L1.1772|
                  |L1.1632|
;;;814        case CAN_IT_RQCP1:
;;;815          pendingbitstatus = CheckITStatus(CANx->TSR, TSR_RQCP1);
000660  68a0              LDR      r0,[r4,#8]
000662  f44f7180          MOV      r1,#0x100
000666  f7fffffe          BL       CheckITStatus
00066a  4606              MOV      r6,r0
;;;816          break;
00066c  e03e              B        |L1.1772|
                  |L1.1646|
;;;817        case CAN_IT_RQCP2:
;;;818          pendingbitstatus = CheckITStatus(CANx->TSR, TSR_RQCP2);
00066e  68a0              LDR      r0,[r4,#8]
000670  f44f3180          MOV      r1,#0x10000
000674  f7fffffe          BL       CheckITStatus
000678  4606              MOV      r6,r0
;;;819          break;
00067a  e037              B        |L1.1772|
                  |L1.1660|
;;;820        case CAN_IT_FF0:
;;;821          pendingbitstatus = CheckITStatus(CANx->RF0R, RF0R_FULL0);
00067c  68e0              LDR      r0,[r4,#0xc]
00067e  2108              MOVS     r1,#8
000680  f7fffffe          BL       CheckITStatus
000684  4606              MOV      r6,r0
;;;822          break;
000686  e031              B        |L1.1772|
                  |L1.1672|
;;;823        case CAN_IT_FOV0:
;;;824          pendingbitstatus = CheckITStatus(CANx->RF0R, RF0R_FOVR0);
000688  68e0              LDR      r0,[r4,#0xc]
00068a  2110              MOVS     r1,#0x10
00068c  f7fffffe          BL       CheckITStatus
000690  4606              MOV      r6,r0
;;;825          break;
000692  e02b              B        |L1.1772|
                  |L1.1684|
;;;826        case CAN_IT_FF1:
;;;827          pendingbitstatus = CheckITStatus(CANx->RF1R, RF1R_FULL1);
000694  6920              LDR      r0,[r4,#0x10]
000696  2108              MOVS     r1,#8
000698  f7fffffe          BL       CheckITStatus
00069c  4606              MOV      r6,r0
;;;828          break;
00069e  e025              B        |L1.1772|
                  |L1.1696|
;;;829        case CAN_IT_FOV1:
;;;830          pendingbitstatus = CheckITStatus(CANx->RF1R, RF1R_FOVR1);
0006a0  6920              LDR      r0,[r4,#0x10]
0006a2  2110              MOVS     r1,#0x10
0006a4  f7fffffe          BL       CheckITStatus
0006a8  4606              MOV      r6,r0
;;;831          break;
0006aa  e01f              B        |L1.1772|
                  |L1.1708|
;;;832        case CAN_IT_EWG:
;;;833          pendingbitstatus = CheckITStatus(CANx->ESR, ESR_EWGF);
0006ac  69a0              LDR      r0,[r4,#0x18]
0006ae  2101              MOVS     r1,#1
0006b0  f7fffffe          BL       CheckITStatus
0006b4  4606              MOV      r6,r0
;;;834          break;
0006b6  e019              B        |L1.1772|
                  |L1.1720|
;;;835        case CAN_IT_EPV:
;;;836          pendingbitstatus = CheckITStatus(CANx->ESR, ESR_EPVF);
0006b8  69a0              LDR      r0,[r4,#0x18]
0006ba  2102              MOVS     r1,#2
0006bc  f7fffffe          BL       CheckITStatus
0006c0  4606              MOV      r6,r0
;;;837          break;
0006c2  e013              B        |L1.1772|
                  |L1.1732|
;;;838        case CAN_IT_BOF:
;;;839          pendingbitstatus = CheckITStatus(CANx->ESR, ESR_BOFF);
0006c4  69a0              LDR      r0,[r4,#0x18]
0006c6  2104              MOVS     r1,#4
0006c8  f7fffffe          BL       CheckITStatus
0006cc  4606              MOV      r6,r0
;;;840          break;
0006ce  e00d              B        |L1.1772|
                  |L1.1744|
;;;841        case CAN_IT_SLK:
;;;842          pendingbitstatus = CheckITStatus(CANx->MSR, MSR_SLAKI);
0006d0  6860              LDR      r0,[r4,#4]
0006d2  2110              MOVS     r1,#0x10
0006d4  f7fffffe          BL       CheckITStatus
0006d8  4606              MOV      r6,r0
;;;843          break;
0006da  e007              B        |L1.1772|
                  |L1.1756|
;;;844        case CAN_IT_WKU:
;;;845          pendingbitstatus = CheckITStatus(CANx->MSR, MSR_WKUI);
0006dc  6860              LDR      r0,[r4,#4]
0006de  2108              MOVS     r1,#8
0006e0  f7fffffe          BL       CheckITStatus
0006e4  4606              MOV      r6,r0
;;;846          break;
0006e6  e001              B        |L1.1772|
                  |L1.1768|
;;;847        default :
;;;848          pendingbitstatus = RESET;
0006e8  2600              MOVS     r6,#0
;;;849          break;
0006ea  bf00              NOP      
                  |L1.1772|
0006ec  bf00              NOP                            ;813
;;;850      }
;;;851      /* Return the CAN_IT status */
;;;852      return  pendingbitstatus;
0006ee  4630              MOV      r0,r6
;;;853    }
0006f0  bd70              POP      {r4-r6,pc}
;;;854    
                          ENDP

                  CAN_ClearITPendingBit PROC
;;;860      */
;;;861    void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
0006f2  2940              CMP      r1,#0x40
;;;862    {
;;;863      /* Check the parameters */
;;;864      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;865      assert_param(IS_CAN_ITStatus(CAN_IT));
;;;866      switch (CAN_IT)
0006f4  d035              BEQ      |L1.1890|
0006f6  dc0e              BGT      |L1.1814|
0006f8  2907              CMP      r1,#7
0006fa  d025              BEQ      |L1.1864|
0006fc  dc06              BGT      |L1.1804|
0006fe  2904              CMP      r1,#4
000700  d026              BEQ      |L1.1872|
000702  2905              CMP      r1,#5
000704  d019              BEQ      |L1.1850|
000706  2906              CMP      r1,#6
000708  d143              BNE      |L1.1938|
00070a  e019              B        |L1.1856|
                  |L1.1804|
00070c  2908              CMP      r1,#8
00070e  d022              BEQ      |L1.1878|
000710  2920              CMP      r1,#0x20
000712  d13e              BNE      |L1.1938|
000714  e022              B        |L1.1884|
                  |L1.1814|
000716  f5b16f80          CMP      r1,#0x400
00071a  d02f              BEQ      |L1.1916|
00071c  dc06              BGT      |L1.1836|
00071e  f5b17f80          CMP      r1,#0x100
000722  d021              BEQ      |L1.1896|
000724  f5b17f00          CMP      r1,#0x200
000728  d133              BNE      |L1.1938|
00072a  e022              B        |L1.1906|
                  |L1.1836|
00072c  f5b13f80          CMP      r1,#0x10000
000730  d029              BEQ      |L1.1926|
000732  f5b13f00          CMP      r1,#0x20000
000736  d12c              BNE      |L1.1938|
000738  e028              B        |L1.1932|
                  |L1.1850|
;;;867      {
;;;868        case CAN_IT_RQCP0:
;;;869          CANx->TSR = TSR_RQCP0; /* rc_w1*/
00073a  2201              MOVS     r2,#1
00073c  6082              STR      r2,[r0,#8]
;;;870          break;
00073e  e029              B        |L1.1940|
                  |L1.1856|
;;;871        case CAN_IT_RQCP1:
;;;872          CANx->TSR = TSR_RQCP1; /* rc_w1*/
000740  f44f7280          MOV      r2,#0x100
000744  6082              STR      r2,[r0,#8]
;;;873          break;
000746  e025              B        |L1.1940|
                  |L1.1864|
;;;874        case CAN_IT_RQCP2:
;;;875          CANx->TSR = TSR_RQCP2; /* rc_w1*/
000748  f44f3280          MOV      r2,#0x10000
00074c  6082              STR      r2,[r0,#8]
;;;876          break;
00074e  e021              B        |L1.1940|
                  |L1.1872|
;;;877        case CAN_IT_FF0:
;;;878          CANx->RF0R = RF0R_FULL0; /* rc_w1*/
000750  2208              MOVS     r2,#8
000752  60c2              STR      r2,[r0,#0xc]
;;;879          break;
000754  e01e              B        |L1.1940|
                  |L1.1878|
;;;880        case CAN_IT_FOV0:
;;;881          CANx->RF0R = RF0R_FOVR0; /* rc_w1*/
000756  2210              MOVS     r2,#0x10
000758  60c2              STR      r2,[r0,#0xc]
;;;882          break;
00075a  e01b              B        |L1.1940|
                  |L1.1884|
;;;883        case CAN_IT_FF1:
;;;884          CANx->RF1R = RF1R_FULL1; /* rc_w1*/
00075c  2208              MOVS     r2,#8
00075e  6102              STR      r2,[r0,#0x10]
;;;885          break;
000760  e018              B        |L1.1940|
                  |L1.1890|
;;;886        case CAN_IT_FOV1:
;;;887          CANx->RF1R = RF1R_FOVR1; /* rc_w1*/
000762  2210              MOVS     r2,#0x10
000764  6102              STR      r2,[r0,#0x10]
;;;888          break;
000766  e015              B        |L1.1940|
                  |L1.1896|
;;;889        case CAN_IT_EWG:
;;;890          CANx->ESR &= ~ ESR_EWGF; /* rw */
000768  6982              LDR      r2,[r0,#0x18]
00076a  f0220201          BIC      r2,r2,#1
00076e  6182              STR      r2,[r0,#0x18]
;;;891          break;
000770  e010              B        |L1.1940|
                  |L1.1906|
;;;892        case CAN_IT_EPV:
;;;893          CANx->ESR &= ~ ESR_EPVF; /* rw */
000772  6982              LDR      r2,[r0,#0x18]
000774  f0220202          BIC      r2,r2,#2
000778  6182              STR      r2,[r0,#0x18]
;;;894          break;
00077a  e00b              B        |L1.1940|
                  |L1.1916|
;;;895        case CAN_IT_BOF:
;;;896          CANx->ESR &= ~ ESR_BOFF; /* rw */
00077c  6982              LDR      r2,[r0,#0x18]
00077e  f0220204          BIC      r2,r2,#4
000782  6182              STR      r2,[r0,#0x18]
;;;897          break;
000784  e006              B        |L1.1940|
                  |L1.1926|
;;;898        case CAN_IT_WKU:
;;;899          CANx->MSR = MSR_WKUI;  /* rc_w1*/
000786  2208              MOVS     r2,#8
000788  6042              STR      r2,[r0,#4]
;;;900          break;
00078a  e003              B        |L1.1940|
                  |L1.1932|
;;;901        case CAN_IT_SLK:
;;;902          CANx->MSR = MSR_SLAKI;  /* rc_w1*/
00078c  2210              MOVS     r2,#0x10
00078e  6042              STR      r2,[r0,#4]
;;;903          break;
000790  e000              B        |L1.1940|
                  |L1.1938|
;;;904        default :
;;;905          break;
000792  bf00              NOP      
                  |L1.1940|
000794  bf00              NOP                            ;870
;;;906      }
;;;907    }
000796  4770              BX       lr
;;;908    
                          ENDP

