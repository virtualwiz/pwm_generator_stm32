; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\stm32f10x_dma.o --asm_dir=.\ --list_dir=.\ --depend=.\obj\stm32f10x_dma.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\stm32f10x_dma.crf FWlib\SRC\stm32f10x_dma.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  DMA_DeInit PROC
;;;110      */
;;;111    void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
000000  6801              LDR      r1,[r0,#0]
;;;112    {
;;;113      /* Check the parameters */
;;;114      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;115      /* Disable the selected DMAy Channelx */
;;;116      DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
000002  f0210101          BIC      r1,r1,#1
000006  6001              STR      r1,[r0,#0]
;;;117      /* Reset DMAy Channelx control register */
;;;118      DMAy_Channelx->CCR  = 0;
000008  2100              MOVS     r1,#0
00000a  6001              STR      r1,[r0,#0]
;;;119      
;;;120      /* Reset DMAy Channelx remaining bytes register */
;;;121      DMAy_Channelx->CNDTR = 0;
00000c  6041              STR      r1,[r0,#4]
;;;122      
;;;123      /* Reset DMAy Channelx peripheral address register */
;;;124      DMAy_Channelx->CPAR  = 0;
00000e  6081              STR      r1,[r0,#8]
;;;125      
;;;126      /* Reset DMAy Channelx memory address register */
;;;127      DMAy_Channelx->CMAR = 0;
000010  60c1              STR      r1,[r0,#0xc]
;;;128      switch (*(uint32_t*)&DMAy_Channelx)
000012  4a87              LDR      r2,|L1.560|
000014  1a81              SUBS     r1,r0,r2
000016  4290              CMP      r0,r2
000018  d05b              BEQ      |L1.210|
00001a  dc12              BGT      |L1.66|
00001c  4a85              LDR      r2,|L1.564|
00001e  eba00102          SUB      r1,r0,r2
000022  4290              CMP      r0,r2
000024  d03a              BEQ      |L1.156|
000026  dc07              BGT      |L1.56|
000028  4983              LDR      r1,|L1.568|
00002a  4401              ADD      r1,r1,r0
00002c  b1d9              CBZ      r1,|L1.102|
00002e  2914              CMP      r1,#0x14
000030  d022              BEQ      |L1.120|
000032  2928              CMP      r1,#0x28
000034  d17a              BNE      |L1.300|
000036  e028              B        |L1.138|
                  |L1.56|
000038  2914              CMP      r1,#0x14
00003a  d038              BEQ      |L1.174|
00003c  2928              CMP      r1,#0x28
00003e  d175              BNE      |L1.300|
000040  e03e              B        |L1.192|
                  |L1.66|
000042  f5b17f6c          CMP      r1,#0x3b0
000046  d05b              BEQ      |L1.256|
000048  dc06              BGT      |L1.88|
00004a  f5b17f62          CMP      r1,#0x388
00004e  d049              BEQ      |L1.228|
000050  f5b17f67          CMP      r1,#0x39c
000054  d16a              BNE      |L1.300|
000056  e04c              B        |L1.242|
                  |L1.88|
000058  f5b17f71          CMP      r1,#0x3c4
00005c  d057              BEQ      |L1.270|
00005e  f5b17f76          CMP      r1,#0x3d8
000062  d163              BNE      |L1.300|
000064  e05b              B        |L1.286|
                  |L1.102|
;;;129      {
;;;130        case DMA1_Channel1_BASE:
;;;131          /* Reset interrupt pending bits for DMA1 Channel1 */
;;;132          DMA1->IFCR |= DMA1_Channel1_IT_Mask;
000066  4973              LDR      r1,|L1.564|
000068  3944              SUBS     r1,r1,#0x44
00006a  6849              LDR      r1,[r1,#4]
00006c  f041010f          ORR      r1,r1,#0xf
000070  4a70              LDR      r2,|L1.564|
000072  3a44              SUBS     r2,r2,#0x44
000074  6051              STR      r1,[r2,#4]
;;;133          break;
000076  e05a              B        |L1.302|
                  |L1.120|
;;;134        case DMA1_Channel2_BASE:
;;;135          /* Reset interrupt pending bits for DMA1 Channel2 */
;;;136          DMA1->IFCR |= DMA1_Channel2_IT_Mask;
000078  496e              LDR      r1,|L1.564|
00007a  3944              SUBS     r1,r1,#0x44
00007c  6849              LDR      r1,[r1,#4]
00007e  f04101f0          ORR      r1,r1,#0xf0
000082  4a6c              LDR      r2,|L1.564|
000084  3a44              SUBS     r2,r2,#0x44
000086  6051              STR      r1,[r2,#4]
;;;137          break;
000088  e051              B        |L1.302|
                  |L1.138|
;;;138        case DMA1_Channel3_BASE:
;;;139          /* Reset interrupt pending bits for DMA1 Channel3 */
;;;140          DMA1->IFCR |= DMA1_Channel3_IT_Mask;
00008a  496a              LDR      r1,|L1.564|
00008c  3944              SUBS     r1,r1,#0x44
00008e  6849              LDR      r1,[r1,#4]
000090  f4416170          ORR      r1,r1,#0xf00
000094  4a67              LDR      r2,|L1.564|
000096  3a44              SUBS     r2,r2,#0x44
000098  6051              STR      r1,[r2,#4]
;;;141          break;
00009a  e048              B        |L1.302|
                  |L1.156|
;;;142        case DMA1_Channel4_BASE:
;;;143          /* Reset interrupt pending bits for DMA1 Channel4 */
;;;144          DMA1->IFCR |= DMA1_Channel4_IT_Mask;
00009c  4965              LDR      r1,|L1.564|
00009e  3944              SUBS     r1,r1,#0x44
0000a0  6849              LDR      r1,[r1,#4]
0000a2  f4414170          ORR      r1,r1,#0xf000
0000a6  4a63              LDR      r2,|L1.564|
0000a8  3a44              SUBS     r2,r2,#0x44
0000aa  6051              STR      r1,[r2,#4]
;;;145          break;
0000ac  e03f              B        |L1.302|
                  |L1.174|
;;;146        case DMA1_Channel5_BASE:
;;;147          /* Reset interrupt pending bits for DMA1 Channel5 */
;;;148          DMA1->IFCR |= DMA1_Channel5_IT_Mask;
0000ae  4961              LDR      r1,|L1.564|
0000b0  3944              SUBS     r1,r1,#0x44
0000b2  6849              LDR      r1,[r1,#4]
0000b4  f4412170          ORR      r1,r1,#0xf0000
0000b8  4a5e              LDR      r2,|L1.564|
0000ba  3a44              SUBS     r2,r2,#0x44
0000bc  6051              STR      r1,[r2,#4]
;;;149          break;
0000be  e036              B        |L1.302|
                  |L1.192|
;;;150        case DMA1_Channel6_BASE:
;;;151          /* Reset interrupt pending bits for DMA1 Channel6 */
;;;152          DMA1->IFCR |= DMA1_Channel6_IT_Mask;
0000c0  495c              LDR      r1,|L1.564|
0000c2  3944              SUBS     r1,r1,#0x44
0000c4  6849              LDR      r1,[r1,#4]
0000c6  f4410170          ORR      r1,r1,#0xf00000
0000ca  4a5a              LDR      r2,|L1.564|
0000cc  3a44              SUBS     r2,r2,#0x44
0000ce  6051              STR      r1,[r2,#4]
;;;153          break;
0000d0  e02d              B        |L1.302|
                  |L1.210|
;;;154        case DMA1_Channel7_BASE:
;;;155          /* Reset interrupt pending bits for DMA1 Channel7 */
;;;156          DMA1->IFCR |= DMA1_Channel7_IT_Mask;
0000d2  4958              LDR      r1,|L1.564|
0000d4  3944              SUBS     r1,r1,#0x44
0000d6  6849              LDR      r1,[r1,#4]
0000d8  f0416170          ORR      r1,r1,#0xf000000
0000dc  4a55              LDR      r2,|L1.564|
0000de  3a44              SUBS     r2,r2,#0x44
0000e0  6051              STR      r1,[r2,#4]
;;;157          break;
0000e2  e024              B        |L1.302|
                  |L1.228|
;;;158        case DMA2_Channel1_BASE:
;;;159          /* Reset interrupt pending bits for DMA2 Channel1 */
;;;160          DMA2->IFCR |= DMA2_Channel1_IT_Mask;
0000e4  4955              LDR      r1,|L1.572|
0000e6  6809              LDR      r1,[r1,#0]
0000e8  f041010f          ORR      r1,r1,#0xf
0000ec  4a53              LDR      r2,|L1.572|
0000ee  6011              STR      r1,[r2,#0]
;;;161          break;
0000f0  e01d              B        |L1.302|
                  |L1.242|
;;;162        case DMA2_Channel2_BASE:
;;;163          /* Reset interrupt pending bits for DMA2 Channel2 */
;;;164          DMA2->IFCR |= DMA2_Channel2_IT_Mask;
0000f2  4952              LDR      r1,|L1.572|
0000f4  6809              LDR      r1,[r1,#0]
0000f6  f04101f0          ORR      r1,r1,#0xf0
0000fa  4a50              LDR      r2,|L1.572|
0000fc  6011              STR      r1,[r2,#0]
;;;165          break;
0000fe  e016              B        |L1.302|
                  |L1.256|
;;;166        case DMA2_Channel3_BASE:
;;;167          /* Reset interrupt pending bits for DMA2 Channel3 */
;;;168          DMA2->IFCR |= DMA2_Channel3_IT_Mask;
000100  494e              LDR      r1,|L1.572|
000102  6809              LDR      r1,[r1,#0]
000104  f4416170          ORR      r1,r1,#0xf00
000108  4a4c              LDR      r2,|L1.572|
00010a  6011              STR      r1,[r2,#0]
;;;169          break;
00010c  e00f              B        |L1.302|
                  |L1.270|
;;;170        case DMA2_Channel4_BASE:
;;;171          /* Reset interrupt pending bits for DMA2 Channel4 */
;;;172          DMA2->IFCR |= DMA2_Channel4_IT_Mask;
00010e  494b              LDR      r1,|L1.572|
000110  6809              LDR      r1,[r1,#0]
000112  f4414170          ORR      r1,r1,#0xf000
000116  4a49              LDR      r2,|L1.572|
000118  6011              STR      r1,[r2,#0]
;;;173          break;
00011a  e008              B        |L1.302|
00011c  e006              B        |L1.300|
                  |L1.286|
;;;174        case DMA2_Channel5_BASE:
;;;175          /* Reset interrupt pending bits for DMA2 Channel5 */
;;;176          DMA2->IFCR |= DMA2_Channel5_IT_Mask;
00011e  4947              LDR      r1,|L1.572|
000120  6809              LDR      r1,[r1,#0]
000122  f4412170          ORR      r1,r1,#0xf0000
000126  4a45              LDR      r2,|L1.572|
000128  6011              STR      r1,[r2,#0]
;;;177          break;
00012a  e000              B        |L1.302|
                  |L1.300|
;;;178          
;;;179        default:
;;;180          break;
00012c  bf00              NOP      
                  |L1.302|
00012e  bf00              NOP                            ;133
;;;181      }
;;;182    }
000130  4770              BX       lr
;;;183    
                          ENDP

                  DMA_Init PROC
;;;194      */
;;;195    void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
000132  b510              PUSH     {r4,lr}
;;;196    {
;;;197      uint32_t tmpreg = 0;
000134  2200              MOVS     r2,#0
;;;198      /* Check the parameters */
;;;199      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;200      assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
;;;201      assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
;;;202      assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
;;;203      assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));   
;;;204      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
;;;205      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
;;;206      assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
;;;207      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
;;;208      assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
;;;209    /*--------------------------- DMAy Channelx CCR Configuration -----------------*/
;;;210      /* Get the DMAy_Channelx CCR value */
;;;211      tmpreg = DMAy_Channelx->CCR;
000136  6802              LDR      r2,[r0,#0]
;;;212      /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;213      tmpreg &= CCR_CLEAR_Mask;
000138  f64773f0          MOV      r3,#0x7ff0
00013c  439a              BICS     r2,r2,r3
;;;214      /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
;;;215      /* Set DIR bit according to DMA_DIR value */
;;;216      /* Set CIRC bit according to DMA_Mode value */
;;;217      /* Set PINC bit according to DMA_PeripheralInc value */
;;;218      /* Set MINC bit according to DMA_MemoryInc value */
;;;219      /* Set PSIZE bits according to DMA_PeripheralDataSize value */
;;;220      /* Set MSIZE bits according to DMA_MemoryDataSize value */
;;;221      /* Set PL bits according to DMA_Priority value */
;;;222      /* Set the MEM2MEM bit according to DMA_M2M value */
;;;223      tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
00013e  6a0c              LDR      r4,[r1,#0x20]
000140  688b              LDR      r3,[r1,#8]
000142  4323              ORRS     r3,r3,r4
000144  690c              LDR      r4,[r1,#0x10]
000146  4323              ORRS     r3,r3,r4
000148  694c              LDR      r4,[r1,#0x14]
00014a  4323              ORRS     r3,r3,r4
00014c  698c              LDR      r4,[r1,#0x18]
00014e  4323              ORRS     r3,r3,r4
000150  69cc              LDR      r4,[r1,#0x1c]
000152  4323              ORRS     r3,r3,r4
000154  6a4c              LDR      r4,[r1,#0x24]
000156  4323              ORRS     r3,r3,r4
000158  6a8c              LDR      r4,[r1,#0x28]
00015a  4323              ORRS     r3,r3,r4
00015c  431a              ORRS     r2,r2,r3
;;;224                DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
;;;225                DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
;;;226                DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
;;;227      /* Write to DMAy Channelx CCR */
;;;228      DMAy_Channelx->CCR = tmpreg;
00015e  6002              STR      r2,[r0,#0]
;;;229    /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
;;;230      /* Write to DMAy Channelx CNDTR */
;;;231      DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
000160  68cb              LDR      r3,[r1,#0xc]
000162  6043              STR      r3,[r0,#4]
;;;232    /*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
;;;233      /* Write to DMAy Channelx CPAR */
;;;234      DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
000164  680b              LDR      r3,[r1,#0]
000166  6083              STR      r3,[r0,#8]
;;;235    /*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
;;;236      /* Write to DMAy Channelx CMAR */
;;;237      DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
000168  684b              LDR      r3,[r1,#4]
00016a  60c3              STR      r3,[r0,#0xc]
;;;238    }
00016c  bd10              POP      {r4,pc}
;;;239    
                          ENDP

                  DMA_StructInit PROC
;;;245      */
;;;246    void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
00016e  2100              MOVS     r1,#0
;;;247    {
;;;248    /*-------------- Reset DMA init structure parameters values ------------------*/
;;;249      /* Initialize the DMA_PeripheralBaseAddr member */
;;;250      DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
000170  6001              STR      r1,[r0,#0]
;;;251      /* Initialize the DMA_MemoryBaseAddr member */
;;;252      DMA_InitStruct->DMA_MemoryBaseAddr = 0;
000172  6041              STR      r1,[r0,#4]
;;;253      /* Initialize the DMA_DIR member */
;;;254      DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
000174  6081              STR      r1,[r0,#8]
;;;255      /* Initialize the DMA_BufferSize member */
;;;256      DMA_InitStruct->DMA_BufferSize = 0;
000176  60c1              STR      r1,[r0,#0xc]
;;;257      /* Initialize the DMA_PeripheralInc member */
;;;258      DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
000178  6101              STR      r1,[r0,#0x10]
;;;259      /* Initialize the DMA_MemoryInc member */
;;;260      DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
00017a  6141              STR      r1,[r0,#0x14]
;;;261      /* Initialize the DMA_PeripheralDataSize member */
;;;262      DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
00017c  6181              STR      r1,[r0,#0x18]
;;;263      /* Initialize the DMA_MemoryDataSize member */
;;;264      DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
00017e  61c1              STR      r1,[r0,#0x1c]
;;;265      /* Initialize the DMA_Mode member */
;;;266      DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
000180  6201              STR      r1,[r0,#0x20]
;;;267      /* Initialize the DMA_Priority member */
;;;268      DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
000182  6241              STR      r1,[r0,#0x24]
;;;269      /* Initialize the DMA_M2M member */
;;;270      DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
000184  6281              STR      r1,[r0,#0x28]
;;;271    }
000186  4770              BX       lr
;;;272    
                          ENDP

                  DMA_Cmd PROC
;;;281      */
;;;282    void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
000188  b121              CBZ      r1,|L1.404|
;;;283    {
;;;284      /* Check the parameters */
;;;285      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;286      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;287      if (NewState != DISABLE)
;;;288      {
;;;289        /* Enable the selected DMAy Channelx */
;;;290        DMAy_Channelx->CCR |= CCR_ENABLE_Set;
00018a  6802              LDR      r2,[r0,#0]
00018c  f0420201          ORR      r2,r2,#1
000190  6002              STR      r2,[r0,#0]
000192  e003              B        |L1.412|
                  |L1.404|
;;;291      }
;;;292      else
;;;293      {
;;;294        /* Disable the selected DMAy Channelx */
;;;295        DMAy_Channelx->CCR &= CCR_ENABLE_Reset;
000194  6802              LDR      r2,[r0,#0]
000196  f0220201          BIC      r2,r2,#1
00019a  6002              STR      r2,[r0,#0]
                  |L1.412|
;;;296      }
;;;297    }
00019c  4770              BX       lr
;;;298    
                          ENDP

                  DMA_ITConfig PROC
;;;313      */
;;;314    void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
00019e  b11a              CBZ      r2,|L1.424|
;;;315    {
;;;316      /* Check the parameters */
;;;317      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;318      assert_param(IS_DMA_CONFIG_IT(DMA_IT));
;;;319      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;320      if (NewState != DISABLE)
;;;321      {
;;;322        /* Enable the selected DMA interrupts */
;;;323        DMAy_Channelx->CCR |= DMA_IT;
0001a0  6803              LDR      r3,[r0,#0]
0001a2  430b              ORRS     r3,r3,r1
0001a4  6003              STR      r3,[r0,#0]
0001a6  e002              B        |L1.430|
                  |L1.424|
;;;324      }
;;;325      else
;;;326      {
;;;327        /* Disable the selected DMA interrupts */
;;;328        DMAy_Channelx->CCR &= ~DMA_IT;
0001a8  6803              LDR      r3,[r0,#0]
0001aa  438b              BICS     r3,r3,r1
0001ac  6003              STR      r3,[r0,#0]
                  |L1.430|
;;;329      }
;;;330    }
0001ae  4770              BX       lr
;;;331    
                          ENDP

                  DMA_GetCurrDataCounter PROC
;;;340      */
;;;341    uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
0001b0  4601              MOV      r1,r0
;;;342    {
;;;343      /* Check the parameters */
;;;344      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;345      /* Return the number of remaining data units for DMAy Channelx */
;;;346      return ((uint16_t)(DMAy_Channelx->CNDTR));
0001b2  6848              LDR      r0,[r1,#4]
0001b4  b280              UXTH     r0,r0
;;;347    }
0001b6  4770              BX       lr
;;;348    
                          ENDP

                  DMA_GetFlagStatus PROC
;;;402      */
;;;403    FlagStatus DMA_GetFlagStatus(uint32_t DMA_FLAG)
0001b8  4601              MOV      r1,r0
;;;404    {
;;;405      FlagStatus bitstatus = RESET;
0001ba  2000              MOVS     r0,#0
;;;406      uint32_t tmpreg = 0;
0001bc  2200              MOVS     r2,#0
;;;407      /* Check the parameters */
;;;408      assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
;;;409      /* Calculate the used DMA */
;;;410      if ((DMA_FLAG & FLAG_Mask) != (uint32_t)RESET)
0001be  f0015380          AND      r3,r1,#0x10000000
0001c2  b11b              CBZ      r3,|L1.460|
;;;411      {
;;;412        /* Get DMA2 ISR register value */
;;;413        tmpreg = DMA2->ISR ;
0001c4  4b1d              LDR      r3,|L1.572|
0001c6  1f1b              SUBS     r3,r3,#4
0001c8  681a              LDR      r2,[r3,#0]
0001ca  e002              B        |L1.466|
                  |L1.460|
;;;414      }
;;;415      else
;;;416      {
;;;417        /* Get DMA1 ISR register value */
;;;418        tmpreg = DMA1->ISR ;
0001cc  4b19              LDR      r3,|L1.564|
0001ce  3b44              SUBS     r3,r3,#0x44
0001d0  681a              LDR      r2,[r3,#0]
                  |L1.466|
;;;419      }
;;;420      /* Check the status of the specified DMA flag */
;;;421      if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
0001d2  ea020301          AND      r3,r2,r1
0001d6  b10b              CBZ      r3,|L1.476|
;;;422      {
;;;423        /* DMA_FLAG is set */
;;;424        bitstatus = SET;
0001d8  2001              MOVS     r0,#1
0001da  e000              B        |L1.478|
                  |L1.476|
;;;425      }
;;;426      else
;;;427      {
;;;428        /* DMA_FLAG is reset */
;;;429        bitstatus = RESET;
0001dc  2000              MOVS     r0,#0
                  |L1.478|
;;;430      }
;;;431      
;;;432      /* Return the DMA_FLAG status */
;;;433      return  bitstatus;
;;;434    }
0001de  4770              BX       lr
;;;435    
                          ENDP

                  DMA_ClearFlag PROC
;;;490      */
;;;491    void DMA_ClearFlag(uint32_t DMA_FLAG)
0001e0  f0005180          AND      r1,r0,#0x10000000
;;;492    {
;;;493      /* Check the parameters */
;;;494      assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
;;;495      /* Calculate the used DMA */
;;;496      if ((DMA_FLAG & FLAG_Mask) != (uint32_t)RESET)
0001e4  b111              CBZ      r1,|L1.492|
;;;497      {
;;;498        /* Clear the selected DMA flags */
;;;499        DMA2->IFCR = DMA_FLAG;
0001e6  4915              LDR      r1,|L1.572|
0001e8  6008              STR      r0,[r1,#0]
0001ea  e002              B        |L1.498|
                  |L1.492|
;;;500      }
;;;501      else
;;;502      {
;;;503        /* Clear the selected DMA flags */
;;;504        DMA1->IFCR = DMA_FLAG;
0001ec  4911              LDR      r1,|L1.564|
0001ee  3944              SUBS     r1,r1,#0x44
0001f0  6048              STR      r0,[r1,#4]
                  |L1.498|
;;;505      }
;;;506    }
0001f2  4770              BX       lr
;;;507    
                          ENDP

                  DMA_GetITStatus PROC
;;;562      */
;;;563    ITStatus DMA_GetITStatus(uint32_t DMA_IT)
0001f4  4601              MOV      r1,r0
;;;564    {
;;;565      ITStatus bitstatus = RESET;
0001f6  2000              MOVS     r0,#0
;;;566      uint32_t tmpreg = 0;
0001f8  2200              MOVS     r2,#0
;;;567      /* Check the parameters */
;;;568      assert_param(IS_DMA_GET_IT(DMA_IT));
;;;569      /* Calculate the used DMA */
;;;570      if ((DMA_IT & FLAG_Mask) != (uint32_t)RESET)
0001fa  f0015380          AND      r3,r1,#0x10000000
0001fe  b11b              CBZ      r3,|L1.520|
;;;571      {
;;;572        /* Get DMA2 ISR register value */
;;;573        tmpreg = DMA2->ISR ;
000200  4b0e              LDR      r3,|L1.572|
000202  1f1b              SUBS     r3,r3,#4
000204  681a              LDR      r2,[r3,#0]
000206  e002              B        |L1.526|
                  |L1.520|
;;;574      }
;;;575      else
;;;576      {
;;;577        /* Get DMA1 ISR register value */
;;;578        tmpreg = DMA1->ISR ;
000208  4b0a              LDR      r3,|L1.564|
00020a  3b44              SUBS     r3,r3,#0x44
00020c  681a              LDR      r2,[r3,#0]
                  |L1.526|
;;;579      }
;;;580      /* Check the status of the specified DMA interrupt */
;;;581      if ((tmpreg & DMA_IT) != (uint32_t)RESET)
00020e  ea020301          AND      r3,r2,r1
000212  b10b              CBZ      r3,|L1.536|
;;;582      {
;;;583        /* DMA_IT is set */
;;;584        bitstatus = SET;
000214  2001              MOVS     r0,#1
000216  e000              B        |L1.538|
                  |L1.536|
;;;585      }
;;;586      else
;;;587      {
;;;588        /* DMA_IT is reset */
;;;589        bitstatus = RESET;
000218  2000              MOVS     r0,#0
                  |L1.538|
;;;590      }
;;;591      /* Return the DMA_IT status */
;;;592      return  bitstatus;
;;;593    }
00021a  4770              BX       lr
;;;594    
                          ENDP

                  DMA_ClearITPendingBit PROC
;;;649      */
;;;650    void DMA_ClearITPendingBit(uint32_t DMA_IT)
00021c  f0005180          AND      r1,r0,#0x10000000
;;;651    {
;;;652      /* Check the parameters */
;;;653      assert_param(IS_DMA_CLEAR_IT(DMA_IT));
;;;654      /* Calculate the used DMA */
;;;655      if ((DMA_IT & FLAG_Mask) != (uint32_t)RESET)
000220  b111              CBZ      r1,|L1.552|
;;;656      {
;;;657        /* Clear the selected DMA interrupt pending bits */
;;;658        DMA2->IFCR = DMA_IT;
000222  4906              LDR      r1,|L1.572|
000224  6008              STR      r0,[r1,#0]
000226  e002              B        |L1.558|
                  |L1.552|
;;;659      }
;;;660      else
;;;661      {
;;;662        /* Clear the selected DMA interrupt pending bits */
;;;663        DMA1->IFCR = DMA_IT;
000228  4902              LDR      r1,|L1.564|
00022a  3944              SUBS     r1,r1,#0x44
00022c  6048              STR      r0,[r1,#4]
                  |L1.558|
;;;664      }
;;;665    }
00022e  4770              BX       lr
;;;666    
                          ENDP

                  |L1.560|
                          DCD      0x40020080
                  |L1.564|
                          DCD      0x40020044
                  |L1.568|
                          DCD      0xbffdfff8
                  |L1.572|
                          DCD      0x40020404
