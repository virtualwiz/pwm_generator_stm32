; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\stm32f10x_wwdg.o --asm_dir=.\ --list_dir=.\ --depend=.\obj\stm32f10x_wwdg.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\stm32f10x_wwdg.crf FWlib\SRC\stm32f10x_wwdg.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  WWDG_DeInit PROC
;;;101      */
;;;102    void WWDG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;103    {
;;;104      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
000002  2101              MOVS     r1,#1
000004  02c8              LSLS     r0,r1,#11
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;105      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f44f6000          MOV      r0,#0x800
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;106    }
000014  bd10              POP      {r4,pc}
;;;107    
                          ENDP

                  WWDG_SetPrescaler PROC
;;;117      */
;;;118    void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
000016  2100              MOVS     r1,#0
;;;119    {
;;;120      uint32_t tmpreg = 0;
;;;121      /* Check the parameters */
;;;122      assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
;;;123      /* Clear WDGTB[1:0] bits */
;;;124      tmpreg = WWDG->CFR & CFR_WDGTB_Mask;
000018  4a16              LDR      r2,|L1.116|
00001a  6812              LDR      r2,[r2,#0]
00001c  f42271c0          BIC      r1,r2,#0x180
;;;125      /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
;;;126      tmpreg |= WWDG_Prescaler;
000020  4301              ORRS     r1,r1,r0
;;;127      /* Store the new value */
;;;128      WWDG->CFR = tmpreg;
000022  4a14              LDR      r2,|L1.116|
000024  6011              STR      r1,[r2,#0]
;;;129    }
000026  4770              BX       lr
;;;130    
                          ENDP

                  WWDG_SetWindowValue PROC
;;;137      */
;;;138    void WWDG_SetWindowValue(uint8_t WindowValue)
000028  2100              MOVS     r1,#0
;;;139    {
;;;140      uint32_t tmpreg = 0;
;;;141      /* Check the parameters */
;;;142      assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
;;;143      /* Clear W[6:0] bits */
;;;144      tmpreg = WWDG->CFR & CFR_W_Mask;
00002a  4a12              LDR      r2,|L1.116|
00002c  6812              LDR      r2,[r2,#0]
00002e  f022017f          BIC      r1,r2,#0x7f
;;;145      /* Set W[6:0] bits according to WindowValue value */
;;;146      tmpreg |= WindowValue & BIT_Mask;
000032  f000027f          AND      r2,r0,#0x7f
000036  4311              ORRS     r1,r1,r2
;;;147      /* Store the new value */
;;;148      WWDG->CFR = tmpreg;
000038  4a0e              LDR      r2,|L1.116|
00003a  6011              STR      r1,[r2,#0]
;;;149    }
00003c  4770              BX       lr
;;;150    
                          ENDP

                  WWDG_EnableIT PROC
;;;155      */
;;;156    void WWDG_EnableIT(void)
00003e  2001              MOVS     r0,#1
;;;157    {
;;;158      *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
000040  490d              LDR      r1,|L1.120|
000042  6008              STR      r0,[r1,#0]
;;;159    }
000044  4770              BX       lr
;;;160    
                          ENDP

                  WWDG_SetCounter PROC
;;;166      */
;;;167    void WWDG_SetCounter(uint8_t Counter)
000046  f000017f          AND      r1,r0,#0x7f
;;;168    {
;;;169      /* Check the parameters */
;;;170      assert_param(IS_WWDG_COUNTER(Counter));
;;;171      /* Write to T[6:0] bits to configure the counter value, no need to do
;;;172         a read-modify-write; writing a 0 to WDGA bit does nothing */
;;;173      WWDG->CR = Counter & BIT_Mask;
00004a  4a0a              LDR      r2,|L1.116|
00004c  1f12              SUBS     r2,r2,#4
00004e  6011              STR      r1,[r2,#0]
;;;174    }
000050  4770              BX       lr
;;;175    
                          ENDP

                  WWDG_Enable PROC
;;;181      */
;;;182    void WWDG_Enable(uint8_t Counter)
000052  f0400180          ORR      r1,r0,#0x80
;;;183    {
;;;184      /* Check the parameters */
;;;185      assert_param(IS_WWDG_COUNTER(Counter));
;;;186      WWDG->CR = CR_WDGA_Set | Counter;
000056  4a07              LDR      r2,|L1.116|
000058  1f12              SUBS     r2,r2,#4
00005a  6011              STR      r1,[r2,#0]
;;;187    }
00005c  4770              BX       lr
;;;188    
                          ENDP

                  WWDG_GetFlagStatus PROC
;;;193      */
;;;194    FlagStatus WWDG_GetFlagStatus(void)
00005e  4805              LDR      r0,|L1.116|
;;;195    {
;;;196      return (FlagStatus)(WWDG->SR);
000060  1d00              ADDS     r0,r0,#4
000062  6800              LDR      r0,[r0,#0]
000064  b2c0              UXTB     r0,r0
;;;197    }
000066  4770              BX       lr
;;;198    
                          ENDP

                  WWDG_ClearFlag PROC
;;;203      */
;;;204    void WWDG_ClearFlag(void)
000068  2000              MOVS     r0,#0
;;;205    {
;;;206      WWDG->SR = (uint32_t)RESET;
00006a  4902              LDR      r1,|L1.116|
00006c  1d09              ADDS     r1,r1,#4
00006e  6008              STR      r0,[r1,#0]
;;;207    }
000070  4770              BX       lr
;;;208    
                          ENDP

000072  0000              DCW      0x0000
                  |L1.116|
                          DCD      0x40002c04
                  |L1.120|
                          DCD      0x420580a4
