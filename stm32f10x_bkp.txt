; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\obj\stm32f10x_bkp.o --asm_dir=.\ --list_dir=.\ --depend=.\obj\stm32f10x_bkp.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\FWlib\inc -I.\user -ID:\Keil_v5\ARM\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include -ID:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\obj\stm32f10x_bkp.crf FWlib\SRC\stm32f10x_bkp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  BKP_DeInit PROC
;;;123      */
;;;124    void BKP_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;125    {
;;;126      RCC_BackupResetCmd(ENABLE);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       RCC_BackupResetCmd
;;;127      RCC_BackupResetCmd(DISABLE);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       RCC_BackupResetCmd
;;;128    }
00000e  bd10              POP      {r4,pc}
;;;129    
                          ENDP

                  BKP_TamperPinLevelConfig PROC
;;;137      */
;;;138    void BKP_TamperPinLevelConfig(uint16_t BKP_TamperPinLevel)
000010  4923              LDR      r1,|L1.160|
;;;139    {
;;;140      /* Check the parameters */
;;;141      assert_param(IS_BKP_TAMPER_PIN_LEVEL(BKP_TamperPinLevel));
;;;142      *(__IO uint32_t *) CR_TPAL_BB = BKP_TamperPinLevel;
000012  6008              STR      r0,[r1,#0]
;;;143    }
000014  4770              BX       lr
;;;144    
                          ENDP

                  BKP_TamperPinCmd PROC
;;;150      */
;;;151    void BKP_TamperPinCmd(FunctionalState NewState)
000016  4922              LDR      r1,|L1.160|
;;;152    {
;;;153      /* Check the parameters */
;;;154      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;155      *(__IO uint32_t *) CR_TPE_BB = (uint32_t)NewState;
000018  1f09              SUBS     r1,r1,#4
00001a  6008              STR      r0,[r1,#0]
;;;156    }
00001c  4770              BX       lr
;;;157    
                          ENDP

                  BKP_ITConfig PROC
;;;163      */
;;;164    void BKP_ITConfig(FunctionalState NewState)
00001e  4920              LDR      r1,|L1.160|
;;;165    {
;;;166      /* Check the parameters */
;;;167      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;168      *(__IO uint32_t *) CSR_TPIE_BB = (uint32_t)NewState;
000020  3184              ADDS     r1,r1,#0x84
000022  6008              STR      r0,[r1,#0]
;;;169    }
000024  4770              BX       lr
;;;170    
                          ENDP

                  BKP_RTCOutputConfig PROC
;;;183      */
;;;184    void BKP_RTCOutputConfig(uint16_t BKP_RTCOutputSource)
000026  4601              MOV      r1,r0
;;;185    {
;;;186      uint16_t tmpreg = 0;
000028  2000              MOVS     r0,#0
;;;187      /* Check the parameters */
;;;188      assert_param(IS_BKP_RTC_OUTPUT_SOURCE(BKP_RTCOutputSource));
;;;189      tmpreg = BKP->RTCCR;
00002a  4a1e              LDR      r2,|L1.164|
00002c  8810              LDRH     r0,[r2,#0]
;;;190      /* Clear CCO, ASOE and ASOS bits */
;;;191      tmpreg &= RTCCR_Mask;
00002e  f64f427f          MOV      r2,#0xfc7f
000032  4010              ANDS     r0,r0,r2
;;;192      
;;;193      /* Set CCO, ASOE and ASOS bits according to BKP_RTCOutputSource value */
;;;194      tmpreg |= BKP_RTCOutputSource;
000034  4308              ORRS     r0,r0,r1
;;;195      /* Store the new value */
;;;196      BKP->RTCCR = tmpreg;
000036  4a1b              LDR      r2,|L1.164|
000038  8010              STRH     r0,[r2,#0]
;;;197    }
00003a  4770              BX       lr
;;;198    
                          ENDP

                  BKP_SetRTCCalibrationValue PROC
;;;204      */
;;;205    void BKP_SetRTCCalibrationValue(uint8_t CalibrationValue)
00003c  4601              MOV      r1,r0
;;;206    {
;;;207      uint16_t tmpreg = 0;
00003e  2000              MOVS     r0,#0
;;;208      /* Check the parameters */
;;;209      assert_param(IS_BKP_CALIBRATION_VALUE(CalibrationValue));
;;;210      tmpreg = BKP->RTCCR;
000040  4a18              LDR      r2,|L1.164|
000042  8810              LDRH     r0,[r2,#0]
;;;211      /* Clear CAL[6:0] bits */
;;;212      tmpreg &= RTCCR_CAL_Mask;
000044  f64f7280          MOV      r2,#0xff80
000048  4010              ANDS     r0,r0,r2
;;;213      /* Set CAL[6:0] bits according to CalibrationValue value */
;;;214      tmpreg |= CalibrationValue;
00004a  4308              ORRS     r0,r0,r1
;;;215      /* Store the new value */
;;;216      BKP->RTCCR = tmpreg;
00004c  4a15              LDR      r2,|L1.164|
00004e  8010              STRH     r0,[r2,#0]
;;;217    }
000050  4770              BX       lr
;;;218    
                          ENDP

                  BKP_WriteBackupRegister PROC
;;;225      */
;;;226    void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data)
000052  4a15              LDR      r2,|L1.168|
;;;227    {
;;;228      /* Check the parameters */
;;;229      assert_param(IS_BKP_DR(BKP_DR));
;;;230      *(__IO uint16_t *) (BKP_BASE + BKP_DR) = Data;
000054  4402              ADD      r2,r2,r0
000056  f8a21c00          STRH     r1,[r2,#0xc00]
;;;231    }
00005a  4770              BX       lr
;;;232    
                          ENDP

                  BKP_ReadBackupRegister PROC
;;;238      */
;;;239    uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR)
00005c  4601              MOV      r1,r0
;;;240    {
;;;241      /* Check the parameters */
;;;242      assert_param(IS_BKP_DR(BKP_DR));
;;;243      return (*(__IO uint16_t *) (BKP_BASE + BKP_DR));
00005e  4812              LDR      r0,|L1.168|
000060  4408              ADD      r0,r0,r1
000062  f8b00c00          LDRH     r0,[r0,#0xc00]
;;;244    }
000066  4770              BX       lr
;;;245    
                          ENDP

                  BKP_GetFlagStatus PROC
;;;250      */
;;;251    FlagStatus BKP_GetFlagStatus(void)
000068  480d              LDR      r0,|L1.160|
;;;252    {
;;;253      return (FlagStatus)(*(__IO uint32_t *) CSR_TEF_BB);
00006a  309c              ADDS     r0,r0,#0x9c
00006c  6800              LDR      r0,[r0,#0]
00006e  b2c0              UXTB     r0,r0
;;;254    }
000070  4770              BX       lr
;;;255    
                          ENDP

                  BKP_ClearFlag PROC
;;;260      */
;;;261    void BKP_ClearFlag(void)
000072  480c              LDR      r0,|L1.164|
;;;262    {
;;;263      /* Set CTE bit to clear Tamper Pin Event flag */
;;;264      BKP->CSR |= CSR_CTE_Set;
000074  3008              ADDS     r0,r0,#8
000076  8800              LDRH     r0,[r0,#0]
000078  f0400001          ORR      r0,r0,#1
00007c  4909              LDR      r1,|L1.164|
00007e  3108              ADDS     r1,r1,#8
000080  8008              STRH     r0,[r1,#0]
;;;265    }
000082  4770              BX       lr
;;;266    
                          ENDP

                  BKP_GetITStatus PROC
;;;271      */
;;;272    ITStatus BKP_GetITStatus(void)
000084  4806              LDR      r0,|L1.160|
;;;273    {
;;;274      return (ITStatus)(*(__IO uint32_t *) CSR_TIF_BB);
000086  30a0              ADDS     r0,r0,#0xa0
000088  6800              LDR      r0,[r0,#0]
00008a  b2c0              UXTB     r0,r0
;;;275    }
00008c  4770              BX       lr
;;;276    
                          ENDP

                  BKP_ClearITPendingBit PROC
;;;281      */
;;;282    void BKP_ClearITPendingBit(void)
00008e  4805              LDR      r0,|L1.164|
;;;283    {
;;;284      /* Set CTI bit to clear Tamper Pin Interrupt pending bit */
;;;285      BKP->CSR |= CSR_CTI_Set;
000090  3008              ADDS     r0,r0,#8
000092  8800              LDRH     r0,[r0,#0]
000094  f0400002          ORR      r0,r0,#2
000098  4902              LDR      r1,|L1.164|
00009a  3108              ADDS     r1,r1,#8
00009c  8008              STRH     r0,[r1,#0]
;;;286    }
00009e  4770              BX       lr
;;;287    
                          ENDP

                  |L1.160|
                          DCD      0x420d8604
                  |L1.164|
                          DCD      0x40006c2c
                  |L1.168|
                          DCD      0x40006000
